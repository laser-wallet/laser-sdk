{
  "language": "Solidity",
  "sources": {
    "contracts/modules/LaserRegistry.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.8.15;\n\ncontract LaserRegistry {\n    address private constant POINTER = address(0x1);\n\n    address public laser;\n\n    uint256 moduleCount;\n\n    mapping(address => address) private approvedModules;\n\n    mapping(address => address) private approvedSingletons;\n\n    modifier onlyLaser() {\n        require(msg.sender == laser, \"Only Laser\");\n\n        _;\n    }\n\n    constructor(\n        address _laser,\n        address firstSingleton,\n        address[] memory modules\n    ) {\n        laser = _laser;\n\n        approvedSingletons[firstSingleton] = approvedSingletons[POINTER];\n        approvedSingletons[firstSingleton] = firstSingleton;\n\n        address currentModule = POINTER;\n        uint256 modulesLength = modules.length;\n        for (uint256 i = 0; i < modulesLength; i++) {\n            address module = modules[i];\n\n            approvedModules[currentModule] = module;\n            currentModule = module;\n        }\n        approvedModules[currentModule] = POINTER;\n        moduleCount = modulesLength;\n    }\n\n    function approveSingleton(address singleton) external onlyLaser {\n        approvedSingletons[singleton] = approvedSingletons[POINTER];\n        approvedSingletons[singleton] = singleton;\n    }\n\n    function approveModule(address module) external onlyLaser {\n        approvedModules[module] = approvedModules[POINTER];\n        approvedModules[POINTER] = module;\n\n        unchecked {\n            ++moduleCount;\n        }\n    }\n\n    function removeModule(address prevModule, address module) external onlyLaser {\n        require(approvedModules[module] != address(0), \"Module not found\");\n        require(module != POINTER, \"incorrect\");\n\n        require(approvedModules[prevModule] == module, \"incorrect prev module\");\n\n        approvedModules[prevModule] = approvedModules[module];\n        approvedModules[module] = address(0);\n\n        unchecked {\n            --moduleCount;\n        }\n    }\n\n    function isSingleton(address singleton) external view returns (bool) {\n        return approvedSingletons[singleton] != address(0) && singleton != POINTER;\n    }\n\n    function isModule(address module) external view returns (bool) {\n        return approvedModules[module] != address(0) && module != POINTER;\n    }\n\n    function getModules() public view returns (address[] memory) {\n        address[] memory modulesArray = new address[](moduleCount);\n        address currentModule = approvedModules[POINTER];\n\n        uint256 index;\n        while (currentModule != POINTER) {\n            modulesArray[index] = currentModule;\n            currentModule = approvedModules[currentModule];\n            unchecked {\n                ++index;\n            }\n        }\n        return modulesArray;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}