{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "laserRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "smartSocialRecovery",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LaserMasterGuard__addGuardModule__overflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LaserMasterGuard__addGuardModule__unauthorizedModule",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LaserMasterGuard__removeGuardModule__incorrectModule",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LaserMasterGuard__removeGuardModule__incorrectPrevModule",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Utils__returnSigner__invalidContractSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Utils__returnSigner__invalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LASER_REGISTRY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LASER_SMART_SOCIAL_RECOVERY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "addGuardModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "getGuardModules",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "prevModule",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "guardianSignature",
          "type": "bytes"
        }
      ],
      "name": "removeGuardModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPriorityFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signatures",
          "type": "bytes"
        }
      ],
      "name": "verifyTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x496c42647daf38d625f8f63f73dec9bc408547e920a22d312c422b800c0c33f1",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "843848",
    "logsBloom": "0x
    "blockHash": "0x6d59d8987aedaf2546d8bb409cf4984d4c50609e8b36cff8d405233056668330",
    "transactionHash": "0x496c42647daf38d625f8f63f73dec9bc408547e920a22d312c422b800c0c33f1",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "843848",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  ],
  "numDeployments": 1,
  "solcInputHash": "de78a7bd8420c51032966958e96a675c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"laserRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smartSocialRecovery\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LaserMasterGuard__addGuardModule__overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LaserMasterGuard__addGuardModule__unauthorizedModule\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LaserMasterGuard__removeGuardModule__incorrectModule\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LaserMasterGuard__removeGuardModule__incorrectPrevModule\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Utils__returnSigner__invalidContractSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Utils__returnSigner__invalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LASER_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LASER_SMART_SOCIAL_RECOVERY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"addGuardModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getGuardModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"guardianSignature\",\"type\":\"bytes\"}],\"name\":\"removeGuardModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"verifyTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Rodrigo Herrera I.\",\"kind\":\"dev\",\"methods\":{\"addGuardModule(address)\":{\"params\":{\"module\":\"The address of the new module. It needs to be authorized in LaserRegistry.\"}},\"constructor\":{\"params\":{\"laserRegistry\":\"Address of LaserRegistry: contract that contains the addresses                              of authorized modules.\",\"smartSocialRecovery\":\"Address of Laser smart social recovery module.\"}},\"getGuardModules(address)\":{\"params\":{\"wallet\":\"The requested address.\"},\"returns\":{\"_0\":\"The guard modules that belong to the requested address.\"}},\"removeGuardModule(address,address,bytes)\":{\"params\":{\"module\":\"The address of the module to remove.\",\"prevModule\":\"The address of the previous module on the linked list.\"}},\"verifyTransaction(address,address,uint256,bytes,uint256,uint256,uint256,uint256,bytes)\":{\"params\":{\"callData\":\"Data payload for the transaction.\",\"gasLimit\":\"Maximum amount of gas the owner is willing to use for this transaction.\",\"maxFeePerGas\":\"Maximum WEI the owner is willing to pay per unit of gas.\",\"maxPriorityFeePerGas\":\"Miner's tip.\",\"nonce\":\"Anti-replay number.\",\"signatures\":\"The signature(s) of the hash of this transaction.\",\"to\":\"Destination address.\",\"value\":\"Amount in WEI to transfer.\",\"wallet\":\"The address of the wallet: should be 'msg.sender'.\"}}},\"title\":\"LaserMasterGuard\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addGuardModule(address)\":{\"notice\":\"Adds a new guard module.         wallet is 'msg.sender'.\"},\"removeGuardModule(address,address,bytes)\":{\"notice\":\"Removes a guard module. wallet is 'msg.sender'.\"},\"verifyTransaction(address,address,uint256,bytes,uint256,uint256,uint256,uint256,bytes)\":{\"notice\":\"Verifies a Laser transaction.         It calls all guard sub-modules with the 'verifyTransaction api'.         Each sub-module implements its own logic. But the main purpose is to         provide extra transaction security.\"}},\"notice\":\"Parent guard module that calls child Laser guards.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/laser-guard/LaserMasterGuard.sol\":\"LaserMasterGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/common/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IEIP1271.sol\\\";\\n\\n/**\\n * @title Utils - Helper functions for Laser wallet and modules.\\n */\\nlibrary Utils {\\n    /*//////////////////////////////////////////////////////////////\\n                            Errors\\n    //////////////////////////////////////////////////////////////*/\\n\\n    error Utils__returnSigner__invalidSignature();\\n\\n    error Utils__returnSigner__invalidContractSignature();\\n\\n    /**\\n     * @param signedHash  The hash that was signed.\\n     * @param signatures  Result of signing the has.\\n     * @param pos         Position of the signer.\\n     *\\n     * @return signer      Address that signed the hash.\\n     */\\n    function returnSigner(\\n        bytes32 signedHash,\\n        bytes memory signatures,\\n        uint256 pos\\n    ) internal view returns (address signer) {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        (r, s, v) = splitSigs(signatures, pos);\\n\\n        if (v == 0) {\\n            // If v is 0, then it is a contract signature.\\n            // The address of the contract is encoded into r.\\n            signer = address(uint160(uint256(r)));\\n\\n            // The signature(s) of the EOA's that control the target contract.\\n            bytes memory contractSignature;\\n\\n            assembly {\\n                contractSignature := add(add(signatures, s), 0x20)\\n            }\\n\\n            if (IEIP1271(signer).isValidSignature(signedHash, contractSignature) != 0x1626ba7e) {\\n                revert Utils__returnSigner__invalidContractSignature();\\n            }\\n        } else if (v > 30) {\\n            signer = ecrecover(\\n                keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", signedHash)),\\n                v - 4,\\n                r,\\n                s\\n            );\\n        } else {\\n            signer = ecrecover(signedHash, v, r, s);\\n        }\\n\\n        if (signer == address(0)) revert Utils__returnSigner__invalidSignature();\\n    }\\n\\n    /**\\n     * @dev Returns the r, s and v values of the signature.\\n     *\\n     * @param pos Which signature to read.\\n     */\\n    function splitSigs(bytes memory signatures, uint256 pos)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        assembly {\\n            let sigPos := mul(0x41, pos)\\n            r := mload(add(signatures, add(sigPos, 0x20)))\\n            s := mload(add(signatures, add(sigPos, 0x40)))\\n            v := byte(0, mload(add(signatures, add(sigPos, 0x60))))\\n        }\\n    }\\n\\n    /**\\n     * @dev Calls a target address, sends value and / or data payload.\\n     *\\n     * @param to     Destination address.\\n     * @param value  Amount in WEI to transfer.\\n     * @param callData   Data payload for the transaction.\\n     */\\n    function call(\\n        address to,\\n        uint256 value,\\n        bytes memory callData,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        assembly {\\n            success := call(txGas, to, value, add(callData, 0x20), mload(callData), 0, 0)\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the gas price for the transaction.\\n     */\\n    function calculateGasPrice(uint256 maxFeePerGas, uint256 maxPriorityFeePerGas) internal view returns (uint256) {\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            // Legacy mode (pre-EIP1559)\\n            return min(maxFeePerGas, tx.gasprice);\\n        }\\n\\n        // EIP-1559\\n        // priority_fee_per_gas = min(transaction.max_priority_fee_per_gas, transaction.max_fee_per_gas - block.base_fee_per_gas)\\n        // effective_gas_price = priority_fee_per_gas + block.base_fee_per_gas\\n        uint256 priorityFeePerGas = min(maxPriorityFeePerGas, maxFeePerGas - block.basefee);\\n\\n        // effective_gas_price\\n        return priorityFeePerGas + block.basefee;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x9292f3676d7449d3f98db4bf2c0ca7a1460da34e3dd4d386d03f5d35919d8003\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IEIP1271.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IEIP1271\\n * @notice Interface to call external contracts to validate signature.\\n */\\ninterface IEIP1271 {\\n    /**\\n     * @dev Implementation of EIP 1271: https://eips.ethereum.org/EIPS/eip-1271.\\n     * @param hash Hash of a message signed on behalf of address(this).\\n     * @param signature Signature byte array associated with _msgHash.\\n     * @return Magic value  or reverts with an error message.\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xfcc98243eaf0e10b323a21e6aca691efec6f128e938f24e495e71cd47c421505\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IERC165\\n * @notice Support of ERC165.\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice Query if a contract implements an interface\\n     * @param interfaceID The interface identifier, as specified in ERC-165\\n     * @dev Interface identification is specified in ERC-165. This function\\n     * uses less than 30,000 gas.\\n     * @return `true` if the contract implements `interfaceID` and\\n     * interfaceID` is not 0xffffffff, `false` otherwise\\n     */\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdf3ddac29884e2c1f2d2fd322bacd6a6907721d3e0909af74cdedeac5c38a9f4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILaserGuard.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @title  ILaserGuard\\n *\\n * @notice Common api interface for all Guard modules (parent and child).\\n */\\ninterface ILaserGuard {\\n    /**\\n     * @notice Verifies a Laser transaction.\\n     *         It calls all guard sub-modules with the 'verifyTransaction api'.\\n     *         Each sub-module implements its own logic. But the main purpose is to\\n     *         provide extra transaction security.\\n     *\\n     * @param wallet The address of the wallet: should be 'msg.sender'.\\n     * @param to                    Destination address.\\n     * @param value                 Amount in WEI to transfer.\\n     * @param callData              Data payload for the transaction.\\n     * @param nonce                 Anti-replay number.\\n     * @param maxFeePerGas          Maximum WEI the owner is willing to pay per unit of gas.\\n     * @param maxPriorityFeePerGas  Miner's tip.\\n     * @param gasLimit              Maximum amount of gas the owner is willing to use for this transaction.\\n     * @param signatures            The signature(s) of the hash of this transaction.\\n     */\\n    function verifyTransaction(\\n        address wallet,\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        bytes memory signatures\\n    ) external;\\n}\\n\",\"keccak256\":\"0x776f241f85fe5c687833dcc8f2e7c0d0a8520e3eefdaa905734daa0fa2fb0498\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILaserMasterGuard.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @title  ILaserMasterGuard\\n *\\n * @author Rodrigo Herrera I.\\n *\\n * @notice Parent guard module that calls child Laser guards.\\n *\\n * @dev    This interface has all events, errors, and external function for LaserMasterGuard.\\n */\\ninterface ILaserMasterGuard {\\n    // addGuardModule() custom errors.\\n    error LaserMasterGuard__addGuardModule__unauthorizedModule();\\n    error LaserMasterGuard__addGuardModule__overflow();\\n\\n    // removeGuardModule custom errors.\\n    error LaserMasterGuard__removeGuardModule__incorrectModule();\\n    error LaserMasterGuard__removeGuardModule__incorrectPrevModule();\\n\\n    /**\\n     * @notice Adds a new guard module.\\n     *         wallet is 'msg.sender'.\\n     *\\n     * @param module The address of the new module. It needs to be authorized in LaserRegistry.\\n     */\\n    function addGuardModule(address module) external;\\n\\n    /**\\n     * @notice Removes a guard module.\\n     * wallet is 'msg.sender'.\\n     *\\n     * @param prevModule    The address of the previous module on the linked list.\\n     * @param module        The address of the module to remove.\\n     */\\n    function removeGuardModule(\\n        address prevModule,\\n        address module,\\n        bytes calldata guardianSignature\\n    ) external;\\n\\n    /**\\n     * @notice Verifies a Laser transaction.\\n     *         It calls all guard sub-modules with the 'verifyTransaction api'.\\n     *         Each sub-module implements its own logic. But the main purpose is to\\n     *         provide extra transaction security.\\n     *\\n     * @param wallet                The address of the wallet: should be 'msg.sender'.\\n     * @param to                    Destination address.\\n     * @param value                 Amount in WEI to transfer.\\n     * @param callData              Data payload for the transaction.\\n     * @param nonce                 Anti-replay number.\\n     * @param maxFeePerGas          Maximum WEI the owner is willing to pay per unit of gas.\\n     * @param maxPriorityFeePerGas  Miner's tip.\\n     * @param gasLimit              Maximum amount of gas the owner is willing to use for this transaction.\\n     * @param signatures            The signature(s) of the hash of this transaction.\\n     */\\n    function verifyTransaction(\\n        address wallet,\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        bytes memory signatures\\n    ) external;\\n\\n    /**\\n     * @param wallet The requested address.\\n     *\\n     * @return The guard modules that belong to the requested address.\\n     */\\n    function getGuardModules(address wallet) external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xb83ea4a33b194ab69c799f07fcae1ce16d98bef6ea522ebf040fbd11e7e67767\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILaserModuleSSR.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\ninterface ILaserModuleSSR {\\n    error SSR__onlyWallet__notWallet();\\n\\n    error SSR__initGuardians__underflow();\\n\\n    error SSR__initRecoveryOwners__underflow();\\n\\n    error SSR__verifyNewRecoveryOwnerOrGuardian__invalidAddress();\\n\\n    ///@dev removeGuardian() custom errors.\\n    error SSR__removeGuardian__underflow();\\n    error SSR__removeGuardian__invalidAddress();\\n    error SSR__removeGuardian__incorrectPreviousGuardian();\\n\\n    ///@dev removeRecoveryOwner() custom errors.\\n    error SSR__removeRecoveryOwner__underflow();\\n    error SSR__removeRecoveryOwner__invalidAddress();\\n    error SSR__removeRecoveryOwner__incorrectPreviousRecoveryOwner();\\n\\n    ///@dev swapGuardian() custom errors.\\n    error SSR__swapGuardian__invalidPrevGuardian();\\n    error SSR__swapGuardian__invalidOldGuardian();\\n\\n    ///@dev swapRecoveryOwner() custom errors.\\n    error SSR__swapRecoveryOwner__invalidPrevRecoveryOwner();\\n    error SSR__swapRecoveryOwner__invalidOldRecoveryOwner();\\n\\n    ///@dev Inits the module.\\n    ///@notice The target wallet is the 'msg.sender'.\\n    function initSSR(address[] calldata _guardians, address[] calldata _recoveryOwners) external;\\n\\n    function lock(\\n        address wallet,\\n        bytes calldata callData,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        address relayer,\\n        bytes memory signatures\\n    ) external;\\n\\n    /**\\n     * @dev Unlocks the target wallet.\\n     * @notice Can only be called with the signature of the wallet's owner + recovery owner or  owner + guardian.\\n     */\\n    function unlock(\\n        address wallet,\\n        bytes calldata callData,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        address relayer,\\n        bytes memory signatures\\n    ) external;\\n\\n    function recover(\\n        address wallet,\\n        bytes calldata callData,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        address relayer,\\n        bytes memory signatures\\n    ) external;\\n\\n    ///@dev Returns the chain id of this.\\n    function getChainId() external view returns (uint256 chainId);\\n\\n    function getGuardians(address wallet) external view returns (address[] memory);\\n\\n    function getRecoveryOwners(address wallet) external view returns (address[] memory);\\n\\n    function getWalletTimeLock(address wallet) external view returns (uint256);\\n\\n    function isGuardian(address wallet, address guardian) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x93a5d48b10d7d44caf79130296d2e411d0cf5bd47481cc89c4d9826c9e9273be\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ILaserRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\ninterface ILaserRegistry {\\n    function isSingleton(address singleton) external view returns (bool);\\n\\n    function isModule(address module) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x13388aa510cba63d240db97afa93547281dae0fb349e9676cb9692443e6f5acf\",\"license\":\"LGPL-3.0-only\"},\"contracts/modules/laser-guard/LaserMasterGuard.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport \\\"../../common/Utils.sol\\\";\\nimport \\\"../../interfaces/ILaserGuard.sol\\\";\\nimport \\\"../../interfaces/ILaserMasterGuard.sol\\\";\\nimport \\\"../../interfaces/ILaserModuleSSR.sol\\\";\\nimport \\\"../../interfaces/ILaserRegistry.sol\\\";\\n\\n/**\\n * @title LaserMasterGuard\\n *\\n * @author Rodrigo Herrera I.\\n *\\n * @notice Parent guard module that calls child Laser guards.\\n */\\ncontract LaserMasterGuard is ILaserMasterGuard {\\n    /*//////////////////////////////////////////////////////////////\\n                            Constans\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address private constant POINTER = address(0x1);\\n\\n    address public immutable LASER_REGISTRY;\\n\\n    address public immutable LASER_SMART_SOCIAL_RECOVERY;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        LaserMasterGuard's storage\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => uint256) internal guardModulesCount;\\n\\n    mapping(address => mapping(address => address)) internal guardModules;\\n\\n    /**\\n     * @param laserRegistry         Address of LaserRegistry: contract that contains the addresses\\n     *                              of authorized modules.\\n     * @param smartSocialRecovery   Address of Laser smart social recovery module.\\n     */\\n    constructor(address laserRegistry, address smartSocialRecovery) {\\n        LASER_REGISTRY = laserRegistry;\\n        //@todo Check that the smart social recovery is registred in LaserRegistry.\\n        LASER_SMART_SOCIAL_RECOVERY = smartSocialRecovery;\\n    }\\n\\n    /**\\n     * @notice Adds a new guard module.\\n     *         wallet is 'msg.sender'.\\n     *\\n     * @param module The address of the new module. It needs to be authorized in LaserRegistry.\\n     */\\n    function addGuardModule(address module) external {\\n        address wallet = msg.sender;\\n\\n        // @todo undo this (make the deployments - approvals automatic on deploy).\\n        // if (!ILaserRegistry(LASER_REGISTRY).isModule(module)) {\\n        //     revert LaserMasterGuard__addGuardModule__unauthorizedModule();\\n        // }\\n\\n        if (guardModulesCount[wallet] == 0) {\\n            initGuardModule(wallet, module);\\n        } else {\\n            guardModules[wallet][module] = guardModules[wallet][POINTER];\\n            guardModules[wallet][POINTER] = module;\\n        }\\n\\n        unchecked {\\n            ++guardModulesCount[wallet];\\n        }\\n\\n        // We can only have a maximum amount of 3 guard modules with low amount of gas usage per transaction.\\n        // This rule is to avoid a self-inflicted DDoS attack.\\n        if (guardModulesCount[wallet] == 4) revert LaserMasterGuard__addGuardModule__overflow();\\n    }\\n\\n    /**\\n     * @notice Removes a guard module.\\n     * wallet is 'msg.sender'.\\n     *\\n     * @param prevModule    The address of the previous module on the linked list.\\n     * @param module        The address of the module to remove.\\n     */\\n    function removeGuardModule(\\n        address prevModule,\\n        address module,\\n        bytes calldata guardianSignature\\n    ) external {\\n        address wallet = msg.sender;\\n\\n        bytes32 signedHash = keccak256(abi.encodePacked(module, block.chainid));\\n\\n        address signer = Utils.returnSigner(signedHash, guardianSignature, 0);\\n\\n        require(ILaserModuleSSR(LASER_SMART_SOCIAL_RECOVERY).isGuardian(wallet, signer), \\\"Invalid guardian signature\\\");\\n\\n        if (guardModules[wallet][module] == address(0)) {\\n            revert LaserMasterGuard__removeGuardModule__incorrectModule();\\n        }\\n\\n        if (module == POINTER) {\\n            revert LaserMasterGuard__removeGuardModule__incorrectModule();\\n        }\\n\\n        if (guardModules[wallet][prevModule] != module) {\\n            revert LaserMasterGuard__removeGuardModule__incorrectPrevModule();\\n        }\\n\\n        guardModules[wallet][prevModule] = guardModules[wallet][module];\\n        guardModules[wallet][module] = address(0);\\n\\n        guardModulesCount[wallet]--;\\n    }\\n\\n    /**\\n     * @notice Verifies a Laser transaction.\\n     *         It calls all guard sub-modules with the 'verifyTransaction api'.\\n     *         Each sub-module implements its own logic. But the main purpose is to\\n     *         provide extra transaction security.\\n     *\\n     * @param wallet                The address of the wallet: should be 'msg.sender'.\\n     * @param to                    Destination address.\\n     * @param value                 Amount in WEI to transfer.\\n     * @param callData              Data payload for the transaction.\\n     * @param nonce                 Anti-replay number.\\n     * @param maxFeePerGas          Maximum WEI the owner is willing to pay per unit of gas.\\n     * @param maxPriorityFeePerGas  Miner's tip.\\n     * @param gasLimit              Maximum amount of gas the owner is willing to use for this transaction.\\n     * @param signatures            The signature(s) of the hash of this transaction.\\n     */\\n    function verifyTransaction(\\n        address wallet,\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        bytes memory signatures\\n    ) external {\\n        uint256 nGuards = guardModulesCount[wallet];\\n\\n        if (nGuards > 0) {\\n            address currentGuardModule = guardModules[wallet][POINTER];\\n\\n            if (nGuards == 1) {\\n                // If there is only 1 guard module, there is no need to loop.\\n                ILaserGuard(currentGuardModule).verifyTransaction(\\n                    wallet,\\n                    to,\\n                    value,\\n                    callData,\\n                    nonce,\\n                    maxFeePerGas,\\n                    maxPriorityFeePerGas,\\n                    gasLimit,\\n                    signatures\\n                );\\n            } else {\\n                // Guard modules are capped at max 3, and each one is verified that the gas usage\\n                // is in bounds. Therefore there is no risk of DDoS (using so much gas that the transaction reverts).\\n                while (currentGuardModule != POINTER) {\\n                    ILaserGuard(currentGuardModule).verifyTransaction(\\n                        wallet,\\n                        to,\\n                        value,\\n                        callData,\\n                        nonce,\\n                        maxFeePerGas,\\n                        maxPriorityFeePerGas,\\n                        gasLimit,\\n                        signatures\\n                    );\\n\\n                    currentGuardModule = guardModules[wallet][currentGuardModule];\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @param wallet The requested address.\\n     *\\n     * @return The guard modules that belong to the requested address.\\n     */\\n    function getGuardModules(address wallet) public view returns (address[] memory) {\\n        address[] memory guardModulesArray = new address[](guardModulesCount[wallet]);\\n        address currentGuardModule = guardModules[wallet][POINTER];\\n\\n        uint256 index;\\n\\n        while (currentGuardModule != POINTER) {\\n            guardModulesArray[index] = currentGuardModule;\\n            currentGuardModule = guardModules[wallet][currentGuardModule];\\n            unchecked {\\n                ++index;\\n            }\\n        }\\n        return guardModulesArray;\\n    }\\n\\n    /**\\n     * @notice Inits the guard modules for a specific wallet.\\n     *\\n     * @param  wallet  Address of the wallet to init the guard module.\\n     * @param  module  Address of the module to init.\\n     */\\n    function initGuardModule(address wallet, address module) internal {\\n        guardModules[wallet][POINTER] = module;\\n        guardModules[wallet][module] = POINTER;\\n    }\\n}\\n\",\"keccak256\":\"0x86c0a78b027e1ff4ce6d381219488e08fccbb93d1049058a152867c481d55896\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610f04380380610f0483398101604081905261002f91610062565b6001600160a01b039182166080521660a052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a051610e456100bf6000396000818160a401526101eb0152600060e80152610e456000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80634bb56296116100505780634bb56296146100e3578063da1732b81461010a578063e98d3ce21461012a57600080fd5b80630f8efeb214610077578063167cd1821461008c5780631f68b4bd1461009f575b600080fd5b61008a610085366004610a35565b61013d565b005b61008a61009a366004610aac565b6103e1565b6100c67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c67f000000000000000000000000000000000000000000000000000000000000000081565b61011d610118366004610be0565b610565565b6040516100da9190610c02565b61008a610138366004610be0565b61065f565b6040516bffffffffffffffffffffffff19606085901b166020820152466034820152339060009060540160405160208183030381529060405280519060200120905060006101c18286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250610778915050565b60405163353ba5cd60e21b81526001600160a01b03858116600483015280831660248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063d4ee973490604401602060405180830381865afa158015610234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102589190610c4f565b6102a85760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420677561726469616e207369676e6174757265000000000000604482015260640160405180910390fd5b6001600160a01b0383811660009081526001602090815260408083208a85168452909152902054166102ed5760405163f00636a960e01b815260040160405180910390fd5b6000196001600160a01b038716016103185760405163f00636a960e01b815260040160405180910390fd5b6001600160a01b0383811660009081526001602090815260408083208b85168452909152902054811690871614610362576040516366bc888560e11b815260040160405180910390fd5b6001600160a01b0383811660008181526001602090815260408083208b86168452825280832080548d8716855282852080549190971673ffffffffffffffffffffffffffffffffffffffff19918216179096558054909516909455918152908190529081208054916103d383610c87565b919050555050505050505050565b6001600160a01b038a166000908152602081905260409020548015610558576001600160a01b03808c16600090815260016020818152604080842083855290915290912054909116908290036104a657604051630b3e68c160e11b81526001600160a01b0382169063167cd1829061046f908f908f908f908f908f908f908f908f908f908f90600401610ceb565b600060405180830381600087803b15801561048957600080fd5b505af115801561049d573d6000803e3d6000fd5b50505050610556565b6001600160a01b03811660011461055657604051630b3e68c160e11b81526001600160a01b0382169063167cd182906104f5908f908f908f908f908f908f908f908f908f908f90600401610ceb565b600060405180830381600087803b15801561050f57600080fd5b505af1158015610523573d6000803e3d6000fd5b505050506001600160a01b038c8116600090815260016020908152604080832094841683529390529190912054166104a6565b505b5050505050505050505050565b6001600160a01b0381166000908152602081905260408120546060919067ffffffffffffffff81111561059a5761059a610a96565b6040519080825280602002602001820160405280156105c3578160200160208202803683370190505b506001600160a01b0380851660009081526001602081815260408084209284529190528120549293509116905b6001600160a01b038216600114610656578183828151811061061457610614610d73565b6001600160a01b0392831660209182029290920181019190915286821660009081526001808352604080832096851683529590925293909320541691016105f0565b50909392505050565b3360008181526020819052604081205490036106cf576001600160a01b038181166000908152600160208181526040808420838552909152808320805494871673ffffffffffffffffffffffffffffffffffffffff1995861681179091558352909120805490921617905561072f565b6001600160a01b038181166000908152600160208181526040808420838552909152808320805487861680865292852080549190961673ffffffffffffffffffffffffffffffffffffffff19918216179095559190925280549092161790555b6001600160a01b038116600090815260208190526040902080546001810190915560040360001901610774576040516323d9a3a160e01b815260040160405180910390fd5b5050565b6000806000806107a286866041020160208101516040820151606090920151909260009190911a90565b9194509250905060ff811660000361087a57604051630b135d3f60e11b81529293508392868301602001906001600160a01b03851690631626ba7e906107ee908b908590600401610d89565b602060405180830381865afa15801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f9190610daa565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916631626ba7e60e01b14610874576040516340aec60f60e11b815260040160405180910390fd5b5061099f565b601e8160ff16111561093f576040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101889052600190605c01604051602081830303815290604052805190602001206004836108df9190610dec565b6040805160008152602081018083529390935260ff90911690820152606081018590526080810184905260a0016020604051602081039080840390855afa15801561092e573d6000803e3d6000fd5b50505060206040510351935061099f565b60408051600081526020810180835289905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610992573d6000803e3d6000fd5b5050506020604051035193505b6001600160a01b0384166109c65760405163b9bf1d7d60e01b815260040160405180910390fd5b5050509392505050565b80356001600160a01b03811681146109e757600080fd5b919050565b60008083601f8401126109fe57600080fd5b50813567ffffffffffffffff811115610a1657600080fd5b602083019150836020828501011115610a2e57600080fd5b9250929050565b60008060008060608587031215610a4b57600080fd5b610a54856109d0565b9350610a62602086016109d0565b9250604085013567ffffffffffffffff811115610a7e57600080fd5b610a8a878288016109ec565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b6000806000806000806000806000806101208b8d031215610acc57600080fd5b610ad58b6109d0565b9950610ae360208c016109d0565b985060408b0135975067ffffffffffffffff8060608d01351115610b0657600080fd5b610b168d60608e01358e016109ec565b909850965060808c0135955060a08c0135945060c08c0135935060e08c013592506101008c0135811015610b4957600080fd5b6101008c01358c018d601f820112610b6057600080fd5b8181351115610b7157610b71610a96565b6040518135601f01601f19908116603f01168101908382118183101715610b9a57610b9a610a96565b81604052823581528f602084358501011115610bb557600080fd5b823560208401602083013760006020843583010152809450505050509295989b9194979a5092959850565b600060208284031215610bf257600080fd5b610bfb826109d0565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610c435783516001600160a01b031683529284019291840191600101610c1e565b50909695505050505050565b600060208284031215610c6157600080fd5b81518015158114610bfb57600080fd5b634e487b7160e01b600052601160045260246000fd5b600081610c9657610c96610c71565b506000190190565b6000815180845260005b81811015610cc457602081850181015186830182015201610ca8565b81811115610cd6576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038b811682528a166020820152604081018990526101206060820181905281018790526000610140888a828501376000818a85010152601f19601f8a011683018860808501528760a08501528660c08501528560e08501528184820301610100850152610d6182820186610c9e565b9e9d5050505050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b828152604060208201526000610da26040830184610c9e565b949350505050565b600060208284031215610dbc57600080fd5b81517fffffffff0000000000000000000000000000000000000000000000000000000081168114610bfb57600080fd5b600060ff821660ff841680821015610e0657610e06610c71565b9003939250505056fea26469706673582212204e79e9ca22ce374e09a7f16f3d6bcdce8025da3d67e341c81c0c4a265bdd656b64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80634bb56296116100505780634bb56296146100e3578063da1732b81461010a578063e98d3ce21461012a57600080fd5b80630f8efeb214610077578063167cd1821461008c5780631f68b4bd1461009f575b600080fd5b61008a610085366004610a35565b61013d565b005b61008a61009a366004610aac565b6103e1565b6100c67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c67f000000000000000000000000000000000000000000000000000000000000000081565b61011d610118366004610be0565b610565565b6040516100da9190610c02565b61008a610138366004610be0565b61065f565b6040516bffffffffffffffffffffffff19606085901b166020820152466034820152339060009060540160405160208183030381529060405280519060200120905060006101c18286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250610778915050565b60405163353ba5cd60e21b81526001600160a01b03858116600483015280831660248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063d4ee973490604401602060405180830381865afa158015610234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102589190610c4f565b6102a85760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420677561726469616e207369676e6174757265000000000000604482015260640160405180910390fd5b6001600160a01b0383811660009081526001602090815260408083208a85168452909152902054166102ed5760405163f00636a960e01b815260040160405180910390fd5b6000196001600160a01b038716016103185760405163f00636a960e01b815260040160405180910390fd5b6001600160a01b0383811660009081526001602090815260408083208b85168452909152902054811690871614610362576040516366bc888560e11b815260040160405180910390fd5b6001600160a01b0383811660008181526001602090815260408083208b86168452825280832080548d8716855282852080549190971673ffffffffffffffffffffffffffffffffffffffff19918216179096558054909516909455918152908190529081208054916103d383610c87565b919050555050505050505050565b6001600160a01b038a166000908152602081905260409020548015610558576001600160a01b03808c16600090815260016020818152604080842083855290915290912054909116908290036104a657604051630b3e68c160e11b81526001600160a01b0382169063167cd1829061046f908f908f908f908f908f908f908f908f908f908f90600401610ceb565b600060405180830381600087803b15801561048957600080fd5b505af115801561049d573d6000803e3d6000fd5b50505050610556565b6001600160a01b03811660011461055657604051630b3e68c160e11b81526001600160a01b0382169063167cd182906104f5908f908f908f908f908f908f908f908f908f908f90600401610ceb565b600060405180830381600087803b15801561050f57600080fd5b505af1158015610523573d6000803e3d6000fd5b505050506001600160a01b038c8116600090815260016020908152604080832094841683529390529190912054166104a6565b505b5050505050505050505050565b6001600160a01b0381166000908152602081905260408120546060919067ffffffffffffffff81111561059a5761059a610a96565b6040519080825280602002602001820160405280156105c3578160200160208202803683370190505b506001600160a01b0380851660009081526001602081815260408084209284529190528120549293509116905b6001600160a01b038216600114610656578183828151811061061457610614610d73565b6001600160a01b0392831660209182029290920181019190915286821660009081526001808352604080832096851683529590925293909320541691016105f0565b50909392505050565b3360008181526020819052604081205490036106cf576001600160a01b038181166000908152600160208181526040808420838552909152808320805494871673ffffffffffffffffffffffffffffffffffffffff1995861681179091558352909120805490921617905561072f565b6001600160a01b038181166000908152600160208181526040808420838552909152808320805487861680865292852080549190961673ffffffffffffffffffffffffffffffffffffffff19918216179095559190925280549092161790555b6001600160a01b038116600090815260208190526040902080546001810190915560040360001901610774576040516323d9a3a160e01b815260040160405180910390fd5b5050565b6000806000806107a286866041020160208101516040820151606090920151909260009190911a90565b9194509250905060ff811660000361087a57604051630b135d3f60e11b81529293508392868301602001906001600160a01b03851690631626ba7e906107ee908b908590600401610d89565b602060405180830381865afa15801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f9190610daa565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916631626ba7e60e01b14610874576040516340aec60f60e11b815260040160405180910390fd5b5061099f565b601e8160ff16111561093f576040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101889052600190605c01604051602081830303815290604052805190602001206004836108df9190610dec565b6040805160008152602081018083529390935260ff90911690820152606081018590526080810184905260a0016020604051602081039080840390855afa15801561092e573d6000803e3d6000fd5b50505060206040510351935061099f565b60408051600081526020810180835289905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610992573d6000803e3d6000fd5b5050506020604051035193505b6001600160a01b0384166109c65760405163b9bf1d7d60e01b815260040160405180910390fd5b5050509392505050565b80356001600160a01b03811681146109e757600080fd5b919050565b60008083601f8401126109fe57600080fd5b50813567ffffffffffffffff811115610a1657600080fd5b602083019150836020828501011115610a2e57600080fd5b9250929050565b60008060008060608587031215610a4b57600080fd5b610a54856109d0565b9350610a62602086016109d0565b9250604085013567ffffffffffffffff811115610a7e57600080fd5b610a8a878288016109ec565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b6000806000806000806000806000806101208b8d031215610acc57600080fd5b610ad58b6109d0565b9950610ae360208c016109d0565b985060408b0135975067ffffffffffffffff8060608d01351115610b0657600080fd5b610b168d60608e01358e016109ec565b909850965060808c0135955060a08c0135945060c08c0135935060e08c013592506101008c0135811015610b4957600080fd5b6101008c01358c018d601f820112610b6057600080fd5b8181351115610b7157610b71610a96565b6040518135601f01601f19908116603f01168101908382118183101715610b9a57610b9a610a96565b81604052823581528f602084358501011115610bb557600080fd5b823560208401602083013760006020843583010152809450505050509295989b9194979a5092959850565b600060208284031215610bf257600080fd5b610bfb826109d0565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610c435783516001600160a01b031683529284019291840191600101610c1e565b50909695505050505050565b600060208284031215610c6157600080fd5b81518015158114610bfb57600080fd5b634e487b7160e01b600052601160045260246000fd5b600081610c9657610c96610c71565b506000190190565b6000815180845260005b81811015610cc457602081850181015186830182015201610ca8565b81811115610cd6576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038b811682528a166020820152604081018990526101206060820181905281018790526000610140888a828501376000818a85010152601f19601f8a011683018860808501528760a08501528660c08501528560e08501528184820301610100850152610d6182820186610c9e565b9e9d5050505050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b828152604060208201526000610da26040830184610c9e565b949350505050565b600060208284031215610dbc57600080fd5b81517fffffffff0000000000000000000000000000000000000000000000000000000081168114610bfb57600080fd5b600060ff821660ff841680821015610e0657610e06610c71565b9003939250505056fea26469706673582212204e79e9ca22ce374e09a7f16f3d6bcdce8025da3d67e341c81c0c4a265bdd656b64736f6c634300080f0033",
  "devdoc": {
    "author": "Rodrigo Herrera I.",
    "kind": "dev",
    "methods": {
      "addGuardModule(address)": {
        "params": {
          "module": "The address of the new module. It needs to be authorized in LaserRegistry."
        }
      },
      "constructor": {
        "params": {
          "laserRegistry": "Address of LaserRegistry: contract that contains the addresses                              of authorized modules.",
          "smartSocialRecovery": "Address of Laser smart social recovery module."
        }
      },
      "getGuardModules(address)": {
        "params": {
          "wallet": "The requested address."
        },
        "returns": {
          "_0": "The guard modules that belong to the requested address."
        }
      },
      "removeGuardModule(address,address,bytes)": {
        "params": {
          "module": "The address of the module to remove.",
          "prevModule": "The address of the previous module on the linked list."
        }
      },
      "verifyTransaction(address,address,uint256,bytes,uint256,uint256,uint256,uint256,bytes)": {
        "params": {
          "callData": "Data payload for the transaction.",
          "gasLimit": "Maximum amount of gas the owner is willing to use for this transaction.",
          "maxFeePerGas": "Maximum WEI the owner is willing to pay per unit of gas.",
          "maxPriorityFeePerGas": "Miner's tip.",
          "nonce": "Anti-replay number.",
          "signatures": "The signature(s) of the hash of this transaction.",
          "to": "Destination address.",
          "value": "Amount in WEI to transfer.",
          "wallet": "The address of the wallet: should be 'msg.sender'."
        }
      }
    },
    "title": "LaserMasterGuard",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addGuardModule(address)": {
        "notice": "Adds a new guard module.         wallet is 'msg.sender'."
      },
      "removeGuardModule(address,address,bytes)": {
        "notice": "Removes a guard module. wallet is 'msg.sender'."
      },
      "verifyTransaction(address,address,uint256,bytes,uint256,uint256,uint256,uint256,bytes)": {
        "notice": "Verifies a Laser transaction.         It calls all guard sub-modules with the 'verifyTransaction api'.         Each sub-module implements its own logic. But the main purpose is to         provide extra transaction security."
      }
    },
    "notice": "Parent guard module that calls child Laser guards.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2169,
        "contract": "contracts/modules/laser-guard/LaserMasterGuard.sol:LaserMasterGuard",
        "label": "guardModulesCount",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2175,
        "contract": "contracts/modules/laser-guard/LaserMasterGuard.sol:LaserMasterGuard",
        "label": "guardModules",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}