{
  "address": "0xB44aC30dD46eED868797BdeE13DD56D9F3E568A4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Access__notAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__SIMULATION__invalidNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__SIMULATION__notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__SIMULATION__refundFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__SIMULATION__walletLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__execFromModule__mainCallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__execFromModule__refundFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__execFromModule__unauthorizedModule",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__exec__invalidNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__exec__notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__exec__refundFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__exec__walletLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__init__notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__init__refundFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LaserState__initOwner__invalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LaserState__initOwner__walletInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LaserState__upgradeSingleton__notLaser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LaserWallet__invalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Utils__returnSigner__invalidContractSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Utils__returnSigner__invalidSignature",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "ExecFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "ExecSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "laserModule",
          "type": "address"
        }
      ],
      "name": "Setup",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newModule",
          "type": "address"
        }
      ],
      "name": "addLaserModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPriorityFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signatures",
          "type": "bytes"
        }
      ],
      "name": "exec",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "maxFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPriorityFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "execFromModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPriorityFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "smartSocialRecoveryModule",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_laserMasterGuard",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "laserVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_laserRegistry",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "smartSocialRecoveryInitData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "ownerSignature",
          "type": "bytes"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "laserMasterGuard",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "laserRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signatures",
              "type": "bytes"
            }
          ],
          "internalType": "struct ILaserWallet.Transaction[]",
          "name": "transactions",
          "type": "tuple[]"
        }
      ],
      "name": "multiCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "result",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPriorityFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        }
      ],
      "name": "operationHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPriorityFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signatures",
          "type": "bytes"
        }
      ],
      "name": "simulateTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gasUsed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "singleton",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_singleton",
          "type": "address"
        }
      ],
      "name": "upgradeSingleton",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbdad846b94ef15c7f608b7845f55f9711f431397cb63e4dc4814981f5f746089",
  "receipt": {
    "to": null,
    "from": "0x7681C78fb672024C8ACce686cc9A7Acf7F07640d",
    "contractAddress": "0xB44aC30dD46eED868797BdeE13DD56D9F3E568A4",
    "transactionIndex": 19,
    "gasUsed": "2096035",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x156929919818d5f2c83f38c3459888323120021b4fe319e1597ca5f301b45b56",
    "transactionHash": "0xbdad846b94ef15c7f608b7845f55f9711f431397cb63e4dc4814981f5f746089",
    "logs": [],
    "blockNumber": 12783089,
    "cumulativeGasUsed": "3264067",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "de78a7bd8420c51032966958e96a675c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Access__notAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__SIMULATION__invalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__SIMULATION__notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__SIMULATION__refundFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__SIMULATION__walletLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__execFromModule__mainCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__execFromModule__refundFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__execFromModule__unauthorizedModule\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__exec__invalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__exec__notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__exec__refundFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__exec__walletLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__init__notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__init__refundFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LaserState__initOwner__invalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LaserState__initOwner__walletInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LaserState__upgradeSingleton__notLaser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LaserWallet__invalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Utils__returnSigner__invalidContractSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Utils__returnSigner__invalidSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"ExecFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"ExecSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"laserModule\",\"type\":\"address\"}],\"name\":\"Setup\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newModule\",\"type\":\"address\"}],\"name\":\"addLaserModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"exec\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"execFromModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smartSocialRecoveryModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_laserMasterGuard\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"laserVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_laserRegistry\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"smartSocialRecoveryInitData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ownerSignature\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"laserMasterGuard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"laserRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"internalType\":\"struct ILaserWallet.Transaction[]\",\"name\":\"transactions\",\"type\":\"tuple[]\"}],\"name\":\"multiCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"result\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"operationHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"simulateTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"singleton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_singleton\",\"type\":\"address\"}],\"name\":\"upgradeSingleton\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Rodrigo Herrera I.\",\"errors\":{\"LaserState__initOwner__walletInitialized()\":[{\"details\":\"initOwner() custom errors.\"}],\"LaserState__upgradeSingleton__notLaser()\":[{\"details\":\"upgradeSingleton() custom error.\"}]},\"kind\":\"dev\",\"methods\":{\"addLaserModule(address)\":{\"params\":{\"newModule\":\"Address of a new authorized Laser module.\"}},\"changeOwner(address)\":{\"params\":{\"newOwner\":\"Address of the new owner.\"}},\"constructor\":{\"details\":\"Sets the owner of the implementation address (singleton) to 'this'.      This will make the base contract unusable, even though it does not have 'delegatecall'.\"},\"exec(address,uint256,bytes,uint256,uint256,uint256,uint256,address,bytes)\":{\"params\":{\"_nonce\":\"Anti-replay number.\",\"callData\":\"Data payload for the transaction.\",\"gasLimit\":\"Maximum amount of gas the owner is willing to use for this transaction.\",\"maxFeePerGas\":\"Maximum WEI the owner is willing to pay per unit of gas.\",\"maxPriorityFeePerGas\":\"Miner's tip.\",\"relayer\":\"Address to refund for the inclusion of this transaction.\",\"signatures\":\"The signature(s) of the hash of this transaction.\",\"to\":\"Destination address.\",\"value\":\"Amount in WEI to transfer.\"}},\"execFromModule(address,uint256,bytes,uint256,uint256,uint256,address)\":{\"params\":{\"callData\":\"Data payload for the transaction.\",\"gasLimit\":\"Maximum amount of gas the owner is willing to use for this transaction.\",\"maxFeePerGas\":\"Maximum WEI the owner is willing to pay per unit of gas.\",\"maxPriorityFeePerGas\":\"Miner's tip.\",\"relayer\":\"Address to refund for the inclusion of this transaction.\",\"to\":\"Destination address.\",\"value\":\"Amount in WEI to transfer.\"}},\"getChainId()\":{\"returns\":{\"chainId\":\"The chain id of this.\"}},\"init(address,uint256,uint256,uint256,address,address,address,address,address,bytes,bytes)\":{\"params\":{\"_laserMasterGuard\":\"Address of the parent guard module 'LaserMasterGuard'.\",\"_laserRegistry\":\"Address of the Laser registry: module that keeps track of authorized modules.\",\"_owner\":\"The owner of the wallet.\",\"gasLimit\":\"Maximum amount of gas the owner is willing to use for this transaction.\",\"laserVault\":\"Address of the guard sub-module 'LaserVault'.\",\"maxFeePerGas\":\"Maximum WEI the owner is willing to pay per unit of gas.\",\"maxPriorityFeePerGas\":\"Miner's tip.\",\"ownerSignature\":\"Signature of the owner that validates approval for initialization.\",\"relayer\":\"Address to refund for the inclusion of this transaction.\",\"smartSocialRecoveryInitData\":\"Initialization data for the provided module.\",\"smartSocialRecoveryModule\":\"Address of the initial module to setup -> Smart Social Recovery.\"}},\"isValidSignature(bytes32,bytes)\":{\"params\":{\"hash\":\"Hash of the data to be signed.\",\"signature\":\"Signature byte array associated with hash. MUST return the bytes4 magic value 0x1626ba7e when function passes. MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5) MUST allow external calls\"},\"returns\":{\"_0\":\"Magic value if signature matches the owner's address and the wallet is not locked.\"}},\"lock()\":{\"details\":\"Can only be called by address(this).\"},\"multiCall((address,uint256,bytes,uint256,uint256,uint256,uint256,address,bytes)[])\":{\"params\":{\"transactions\":\"An array of Laser transactions.\"}},\"simulateTransaction(address,uint256,bytes,uint256,uint256,uint256,uint256,address,bytes)\":{\"params\":{\"_nonce\":\"Anti-replay number.\",\"callData\":\"Data payload for the transaction.\",\"gasLimit\":\"Maximum amount of gas the owner is willing to use for this transaction.\",\"maxFeePerGas\":\"Maximum WEI the owner is willing to pay per unit of gas.\",\"maxPriorityFeePerGas\":\"Miner's tip.\",\"relayer\":\"Address to refund for the inclusion of this transaction.\",\"signatures\":\"The signature(s) of the hash of this transaction.\",\"to\":\"Destination address.\",\"value\":\"Amount in WEI to transfer.\"},\"returns\":{\"gasUsed\":\"The gas used for this transaction.\"}},\"unlock()\":{\"details\":\"Can only be called by address(this).\"}},\"title\":\"LaserWallet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLaserModule(address)\":{\"notice\":\"Restricted, can only be called by the wallet 'address(this)' or module.\"},\"changeOwner(address)\":{\"notice\":\"Restricted, can only be called by the wallet 'address(this)' or module.\"},\"domainSeparator()\":{\"notice\":\"Domain separator for this wallet.\"},\"exec(address,uint256,bytes,uint256,uint256,uint256,uint256,address,bytes)\":{\"notice\":\"Executes a generic transaction.         If 'gasLimit' does not match the actual gas limit of the transaction, the relayer can incur losses.         It is the relayer's responsability to make sure that they are the same,         the user does not get affected if a mistake is made.\"},\"execFromModule(address,uint256,bytes,uint256,uint256,uint256,address)\":{\"notice\":\"Executes a transaction from an authorized module.         If 'gasLimit' does not match the actual gas limit of the transaction, the relayer can incur losses.         It is the relayer's responsability to make sure that they are the same,         the user does not get affected if a mistake is made.\"},\"init(address,uint256,uint256,uint256,address,address,address,address,address,bytes,bytes)\":{\"notice\":\"Setup function, sets initial storage of the wallet.         It can't be called after initialization.\"},\"isValidSignature(bytes32,bytes)\":{\"notice\":\"Should return whether the signature provided is valid for the provided hash.\"},\"lock()\":{\"notice\":\"Locks the wallet. Once locked, only the SSR module can unlock it or recover it.\"},\"multiCall((address,uint256,bytes,uint256,uint256,uint256,uint256,address,bytes)[])\":{\"notice\":\"Executes a batch of transactions.\"},\"operationHash(address,uint256,bytes,uint256,uint256,uint256,uint256)\":{\"notice\":\"Returns the hash to be signed to execute a transaction.\"},\"simulateTransaction(address,uint256,bytes,uint256,uint256,uint256,uint256,address,bytes)\":{\"notice\":\"Simulates a transaction.         It needs to be called off-chain from address(0).\"},\"unlock()\":{\"notice\":\"Unlocks the wallet. Can only be unlocked or recovered from the SSR module.\"}},\"notice\":\"Laser is a modular smart contract wallet made for the Ethereum Virtual Machine.         It has modularity (programmability) and security at its core.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LaserWallet.sol\":\"LaserWallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/LaserWallet.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport \\\"./handlers/Handler.sol\\\";\\nimport \\\"./interfaces/ILaserGuard.sol\\\";\\nimport \\\"./interfaces/ILaserWallet.sol\\\";\\nimport \\\"./state/LaserState.sol\\\";\\n\\n/**\\n * @title  LaserWallet\\n *\\n * @author Rodrigo Herrera I.\\n *\\n * @notice Laser is a modular smart contract wallet made for the Ethereum Virtual Machine.\\n *         It has modularity (programmability) and security at its core.\\n */\\ncontract LaserWallet is ILaserWallet, LaserState, Handler {\\n    /*//////////////////////////////////////////////////////////////\\n                            Laser metadata\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    string public constant NAME = \\\"Laser Wallet\\\";\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        Signature constant helpers\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes4 private constant EIP1271_MAGIC_VALUE = bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"));\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\n\\n    bytes32 private constant LASER_TYPE_STRUCTURE =\\n        keccak256(\\n            \\\"LaserOperation(address to,uint256 value,bytes callData,uint256 nonce,uint256 maxFeePerGas,uint256 maxPriorityFeePerGas,uint256 gasLimit)\\\"\\n        );\\n\\n    /**\\n     * @dev Sets the owner of the implementation address (singleton) to 'this'.\\n     *      This will make the base contract unusable, even though it does not have 'delegatecall'.\\n     */\\n    constructor() {\\n        owner = address(this);\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Setup function, sets initial storage of the wallet.\\n     *         It can't be called after initialization.\\n     *\\n     * @param _owner                        The owner of the wallet.\\n     * @param maxFeePerGas                  Maximum WEI the owner is willing to pay per unit of gas.\\n     * @param maxPriorityFeePerGas          Miner's tip.\\n     * @param gasLimit                      Maximum amount of gas the owner is willing to use for this transaction.\\n     * @param relayer                       Address to refund for the inclusion of this transaction.\\n     * @param smartSocialRecoveryModule     Address of the initial module to setup -> Smart Social Recovery.\\n     * @param _laserMasterGuard             Address of the parent guard module 'LaserMasterGuard'.\\n     * @param laserVault                    Address of the guard sub-module 'LaserVault'.\\n     * @param _laserRegistry                Address of the Laser registry: module that keeps track of authorized modules.\\n     * @param smartSocialRecoveryInitData   Initialization data for the provided module.\\n     * @param ownerSignature                Signature of the owner that validates approval for initialization.\\n     */\\n    function init(\\n        address _owner,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        address relayer,\\n        address smartSocialRecoveryModule,\\n        address _laserMasterGuard,\\n        address laserVault,\\n        address _laserRegistry,\\n        bytes calldata smartSocialRecoveryInitData,\\n        bytes memory ownerSignature\\n    ) external {\\n        // activateWallet verifies that the current owner is address 0, reverts otherwise.\\n        // This is more than enough to avoid being called after initialization.\\n        activateWallet(\\n            _owner,\\n            smartSocialRecoveryModule,\\n            _laserMasterGuard,\\n            laserVault,\\n            _laserRegistry,\\n            smartSocialRecoveryInitData\\n        );\\n\\n        // This is to ensure that the owner authorized the amount of gas.\\n        {\\n            bytes32 signedHash = keccak256(\\n                abi.encodePacked(maxFeePerGas, maxPriorityFeePerGas, gasLimit, block.chainid, address(this))\\n            );\\n\\n            address signer = Utils.returnSigner(signedHash, ownerSignature, 0);\\n            if (signer != _owner) revert LW__init__notOwner();\\n        }\\n\\n        if (gasLimit > 0) {\\n            // Using Infura's relayer for now ...\\n            uint256 fee = (tx.gasprice / 100) * 6;\\n            uint256 gasPrice = tx.gasprice + fee;\\n\\n            // 2 call depths.\\n            gasLimit = (gasLimit * 3150) / 3200;\\n            uint256 gasUsed = gasLimit - gasleft() + 8000;\\n\\n            uint256 refundAmount = gasUsed * gasPrice;\\n\\n            bool success = Utils.call(\\n                relayer == address(0) ? tx.origin : relayer,\\n                refundAmount,\\n                new bytes(0),\\n                gasleft()\\n            );\\n\\n            if (!success) revert LW__init__refundFailure();\\n        }\\n        // emit Setup(_owner, laserModule);\\n    }\\n\\n    /**\\n     * @notice Executes a generic transaction.\\n     *         If 'gasLimit' does not match the actual gas limit of the transaction, the relayer can incur losses.\\n     *         It is the relayer's responsability to make sure that they are the same,\\n     *         the user does not get affected if a mistake is made.\\n     *\\n     * @param to                    Destination address.\\n     * @param value                 Amount in WEI to transfer.\\n     * @param callData              Data payload for the transaction.\\n     * @param _nonce                Anti-replay number.\\n     * @param maxFeePerGas          Maximum WEI the owner is willing to pay per unit of gas.\\n     * @param maxPriorityFeePerGas  Miner's tip.\\n     * @param gasLimit              Maximum amount of gas the owner is willing to use for this transaction.\\n     * @param relayer               Address to refund for the inclusion of this transaction.\\n     * @param signatures            The signature(s) of the hash of this transaction.\\n     */\\n    function exec(\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 _nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        address relayer,\\n        bytes memory signatures\\n    ) public returns (bool success) {\\n        // We immediately increase the nonce to avoid replay attacks.\\n        unchecked {\\n            if (nonce++ != _nonce) revert LW__exec__invalidNonce();\\n        }\\n\\n        // If the wallet is locked, further transactions cannot be executed from 'exec'.\\n        if (isLocked) revert LW__exec__walletLocked();\\n\\n        // We get the hash of this transaction.\\n        bytes32 signedHash = keccak256(\\n            encodeOperation(to, value, callData, _nonce, maxFeePerGas, maxPriorityFeePerGas, gasLimit)\\n        );\\n\\n        // We get the signer of the hash of this transaction.\\n        address signer = Utils.returnSigner(signedHash, signatures, 0);\\n\\n        // The signer must be the owner.\\n        if (signer != owner) revert LW__exec__notOwner();\\n        // We call Laser master guard to verify the transaction (in bounds).\\n        ILaserGuard(laserMasterGuard).verifyTransaction(\\n            address(this),\\n            to,\\n            value,\\n            callData,\\n            _nonce,\\n            maxFeePerGas,\\n            maxPriorityFeePerGas,\\n            gasLimit,\\n            signatures\\n        );\\n        // We execute the main transaction but we keep 10_000 units of gas for the remaining operations.\\n        success = Utils.call(to, value, callData, gasleft() - 10000);\\n\\n        // We do not revert the call if it fails, because the wallet needs to pay the relayer even in case of failure.\\n        if (success) emit ExecSuccess(to, value, nonce);\\n        else emit ExecFailure(to, value, nonce);\\n\\n        if (gasLimit > 0) {\\n            // If gas limit is greater than 0, it means that the call was relayed.\\n\\n            // We are using Infura's relayer for now ...\\n            uint256 fee = (tx.gasprice / 100) * 6;\\n            uint256 gasPrice = tx.gasprice + fee;\\n            gasLimit = (gasLimit * 63) / 64;\\n            uint256 gasUsed = gasLimit - gasleft() + 7000;\\n            uint256 refundAmount = gasUsed * gasPrice;\\n            success = Utils.call(relayer == address(0) ? tx.origin : relayer, refundAmount, new bytes(0), gasleft());\\n            if (!success) revert LW__exec__refundFailure();\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a batch of transactions.\\n     *\\n     * @param transactions An array of Laser transactions.\\n     */\\n    function multiCall(Transaction[] calldata transactions) external {\\n        uint256 transactionsLength = transactions.length;\\n\\n        //@todo custom errors and optimization.\\n        for (uint256 i = 0; i < transactionsLength; ) {\\n            Transaction calldata transaction = transactions[i];\\n\\n            exec(\\n                transaction.to,\\n                transaction.value,\\n                transaction.callData,\\n                transaction.nonce,\\n                transaction.maxFeePerGas,\\n                transaction.maxPriorityFeePerGas,\\n                transaction.gasLimit,\\n                transaction.relayer,\\n                transaction.signatures\\n            );\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a transaction from an authorized module.\\n     *         If 'gasLimit' does not match the actual gas limit of the transaction, the relayer can incur losses.\\n     *         It is the relayer's responsability to make sure that they are the same,\\n     *         the user does not get affected if a mistake is made.\\n     *\\n     * @param to                    Destination address.\\n     * @param value                 Amount in WEI to transfer.\\n     * @param callData              Data payload for the transaction.\\n     * @param maxFeePerGas          Maximum WEI the owner is willing to pay per unit of gas.\\n     * @param maxPriorityFeePerGas  Miner's tip.\\n     * @param gasLimit              Maximum amount of gas the owner is willing to use for this transaction.\\n     * @param relayer               Address to refund for the inclusion of this transaction.\\n     */\\n    function execFromModule(\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        address relayer\\n    ) external {\\n        // We quiet compiler warnings FOR NOW.\\n        (maxFeePerGas, maxPriorityFeePerGas);\\n        unchecked {\\n            nonce++;\\n        }\\n        if (laserModules[msg.sender] == address(0)) revert LW__execFromModule__unauthorizedModule();\\n\\n        bool success = Utils.call(to, value, callData, gasleft() - 10000);\\n\\n        if (!success) revert LW__execFromModule__mainCallFailed();\\n\\n        if (gasLimit > 0) {\\n            // Using infura relayer for now ...\\n            uint256 fee = (tx.gasprice / 100) * 6;\\n            uint256 gasPrice = tx.gasprice + fee;\\n            gasLimit = (gasLimit * 63) / 64;\\n            uint256 gasUsed = gasLimit - gasleft() + 7000;\\n            uint256 refundAmount = gasUsed * gasPrice;\\n\\n            success = Utils.call(relayer == address(0) ? tx.origin : relayer, refundAmount, new bytes(0), gasleft());\\n\\n            if (!success) revert LW__execFromModule__refundFailure();\\n        }\\n    }\\n\\n    /**\\n     * @notice Simulates a transaction.\\n     *         It needs to be called off-chain from address(0).\\n     *\\n     * @param to                    Destination address.\\n     * @param value                 Amount in WEI to transfer.\\n     * @param callData              Data payload for the transaction.\\n     * @param _nonce                Anti-replay number.\\n     * @param maxFeePerGas          Maximum WEI the owner is willing to pay per unit of gas.\\n     * @param maxPriorityFeePerGas  Miner's tip.\\n     * @param gasLimit              Maximum amount of gas the owner is willing to use for this transaction.\\n     * @param relayer               Address to refund for the inclusion of this transaction.\\n     * @param signatures            The signature(s) of the hash of this transaction.\\n     *\\n     * @return gasUsed The gas used for this transaction.\\n     */\\n    function simulateTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 _nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        address relayer,\\n        bytes memory signatures\\n    ) external returns (uint256 gasUsed) {\\n        // We immediately increase the nonce to avoid replay attacks.\\n        unchecked {\\n            if (nonce++ != _nonce) revert LW__SIMULATION__invalidNonce();\\n        }\\n\\n        // If the wallet is locked, further transactions cannot be executed from 'exec'.\\n        if (isLocked) revert LW__SIMULATION__walletLocked();\\n\\n        // We get the hash of this transaction.\\n        bytes32 signedHash = keccak256(\\n            encodeOperation(to, value, callData, _nonce, maxFeePerGas, maxPriorityFeePerGas, gasLimit)\\n        );\\n\\n        // We get the signer of the hash of this transaction.\\n        address signer = Utils.returnSigner(signedHash, signatures, 0);\\n\\n        // The signer must be the owner.\\n        if (signer != owner) revert LW__SIMULATION__notOwner();\\n        // We call Laser master guard to verify the transaction (in bounds).\\n        ILaserGuard(laserMasterGuard).verifyTransaction(\\n            address(this),\\n            to,\\n            value,\\n            callData,\\n            _nonce,\\n            maxFeePerGas,\\n            maxPriorityFeePerGas,\\n            gasLimit,\\n            signatures\\n        );\\n        // We execute the main transaction but we keep 10_000 units of gas for the remaining operations.\\n        bool success = Utils.call(to, value, callData, gasleft() - 10000);\\n\\n        // We do not revert the call if it fails, because the wallet needs to pay the relayer even in case of failure.\\n        if (success) emit ExecSuccess(to, value, nonce);\\n        else emit ExecFailure(to, value, nonce);\\n\\n        if (gasLimit > 0) {\\n            // If gas limit is greater than 0, it means that the call was relayed.\\n\\n            // We are using Infura's relayer for now ...\\n            uint256 fee = (tx.gasprice / 100) * 6;\\n            uint256 gasPrice = tx.gasprice + fee;\\n            gasLimit = (gasLimit * 63) / 64;\\n            uint256 _gasUsed = gasLimit - gasleft() + 7000;\\n            uint256 refundAmount = _gasUsed * gasPrice;\\n            success = Utils.call(relayer == address(0) ? tx.origin : relayer, refundAmount, new bytes(0), gasleft());\\n            if (!success) revert LW__SIMULATION__refundFailure();\\n        }\\n\\n        gasUsed = gasLimit - gasleft();\\n        require(msg.sender == address(0), \\\"Must be called off-chain from 0 addr\\\");\\n    }\\n\\n    /**\\n     * @notice Locks the wallet. Once locked, only the SSR module can unlock it or recover it.\\n     *\\n     * @dev Can only be called by address(this).\\n     */\\n    function lock() external access {\\n        isLocked = true;\\n    }\\n\\n    /**\\n     * @notice Unlocks the wallet. Can only be unlocked or recovered from the SSR module.\\n     *\\n     * @dev Can only be called by address(this).\\n     */\\n    function unlock() external access {\\n        isLocked = false;\\n    }\\n\\n    /**\\n     * @notice Should return whether the signature provided is valid for the provided hash.\\n     *\\n     * @param hash      Hash of the data to be signed.\\n     * @param signature Signature byte array associated with hash.\\n     *\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     *\\n     * @return Magic value if signature matches the owner's address and the wallet is not locked.\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4) {\\n        address recovered = Utils.returnSigner(hash, signature, 0);\\n\\n        if (recovered != owner || isLocked) revert LaserWallet__invalidSignature();\\n        return EIP1271_MAGIC_VALUE;\\n    }\\n\\n    /**\\n     * @notice Returns the hash to be signed to execute a transaction.\\n     */\\n    function operationHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 _nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit\\n    ) external view returns (bytes32) {\\n        return keccak256(encodeOperation(to, value, callData, _nonce, maxFeePerGas, maxPriorityFeePerGas, gasLimit));\\n    }\\n\\n    /**\\n     * @return chainId The chain id of this.\\n     */\\n    function getChainId() public view returns (uint256 chainId) {\\n        return block.chainid;\\n    }\\n\\n    /**\\n     * @notice Domain separator for this wallet.\\n     */\\n    function domainSeparator() public view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @notice Encodes the transaction data.\\n     */\\n    function encodeOperation(\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 _nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit\\n    ) internal view returns (bytes memory) {\\n        bytes32 opHash = keccak256(\\n            abi.encode(\\n                LASER_TYPE_STRUCTURE,\\n                to,\\n                value,\\n                keccak256(callData),\\n                _nonce,\\n                maxFeePerGas,\\n                maxPriorityFeePerGas,\\n                gasLimit\\n            )\\n        );\\n\\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), opHash);\\n    }\\n}\\n\",\"keccak256\":\"0xcec4454e04e82b4b7dc92f28d36c0916d60a9c06cd3420ef806c58346654fb24\",\"license\":\"LGPL-3.0-only\"},\"contracts/access/Access.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\ncontract Access {\\n    error Access__notAllowed();\\n\\n    modifier access() {\\n        if (msg.sender != address(this)) revert Access__notAllowed();\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9857809f1250e84f95289e05fcde6bcde97ba6b1c596cfb57206b253ebffad32\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IEIP1271.sol\\\";\\n\\n/**\\n * @title Utils - Helper functions for Laser wallet and modules.\\n */\\nlibrary Utils {\\n    /*//////////////////////////////////////////////////////////////\\n                            Errors\\n    //////////////////////////////////////////////////////////////*/\\n\\n    error Utils__returnSigner__invalidSignature();\\n\\n    error Utils__returnSigner__invalidContractSignature();\\n\\n    /**\\n     * @param signedHash  The hash that was signed.\\n     * @param signatures  Result of signing the has.\\n     * @param pos         Position of the signer.\\n     *\\n     * @return signer      Address that signed the hash.\\n     */\\n    function returnSigner(\\n        bytes32 signedHash,\\n        bytes memory signatures,\\n        uint256 pos\\n    ) internal view returns (address signer) {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        (r, s, v) = splitSigs(signatures, pos);\\n\\n        if (v == 0) {\\n            // If v is 0, then it is a contract signature.\\n            // The address of the contract is encoded into r.\\n            signer = address(uint160(uint256(r)));\\n\\n            // The signature(s) of the EOA's that control the target contract.\\n            bytes memory contractSignature;\\n\\n            assembly {\\n                contractSignature := add(add(signatures, s), 0x20)\\n            }\\n\\n            if (IEIP1271(signer).isValidSignature(signedHash, contractSignature) != 0x1626ba7e) {\\n                revert Utils__returnSigner__invalidContractSignature();\\n            }\\n        } else if (v > 30) {\\n            signer = ecrecover(\\n                keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", signedHash)),\\n                v - 4,\\n                r,\\n                s\\n            );\\n        } else {\\n            signer = ecrecover(signedHash, v, r, s);\\n        }\\n\\n        if (signer == address(0)) revert Utils__returnSigner__invalidSignature();\\n    }\\n\\n    /**\\n     * @dev Returns the r, s and v values of the signature.\\n     *\\n     * @param pos Which signature to read.\\n     */\\n    function splitSigs(bytes memory signatures, uint256 pos)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        assembly {\\n            let sigPos := mul(0x41, pos)\\n            r := mload(add(signatures, add(sigPos, 0x20)))\\n            s := mload(add(signatures, add(sigPos, 0x40)))\\n            v := byte(0, mload(add(signatures, add(sigPos, 0x60))))\\n        }\\n    }\\n\\n    /**\\n     * @dev Calls a target address, sends value and / or data payload.\\n     *\\n     * @param to     Destination address.\\n     * @param value  Amount in WEI to transfer.\\n     * @param callData   Data payload for the transaction.\\n     */\\n    function call(\\n        address to,\\n        uint256 value,\\n        bytes memory callData,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        assembly {\\n            success := call(txGas, to, value, add(callData, 0x20), mload(callData), 0, 0)\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the gas price for the transaction.\\n     */\\n    function calculateGasPrice(uint256 maxFeePerGas, uint256 maxPriorityFeePerGas) internal view returns (uint256) {\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            // Legacy mode (pre-EIP1559)\\n            return min(maxFeePerGas, tx.gasprice);\\n        }\\n\\n        // EIP-1559\\n        // priority_fee_per_gas = min(transaction.max_priority_fee_per_gas, transaction.max_fee_per_gas - block.base_fee_per_gas)\\n        // effective_gas_price = priority_fee_per_gas + block.base_fee_per_gas\\n        uint256 priorityFeePerGas = min(maxPriorityFeePerGas, maxFeePerGas - block.basefee);\\n\\n        // effective_gas_price\\n        return priorityFeePerGas + block.basefee;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x9292f3676d7449d3f98db4bf2c0ca7a1460da34e3dd4d386d03f5d35919d8003\",\"license\":\"LGPL-3.0-only\"},\"contracts/handlers/Handler.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IHandler.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @title Handler - Supports token callbacks.\\n */\\ncontract Handler is IHandler, IERC165 {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return 0x150b7a02;\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return 0xf23a6e61;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure returns (bytes4 result) {\\n        return 0xbc197c81;\\n    }\\n\\n    function tokensReceived(\\n        address,\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata,\\n        bytes calldata\\n    ) external pure {}\\n\\n    function supportsInterface(bytes4 _interfaceId) external pure returns (bool) {\\n        return\\n            _interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            _interfaceId == 0x1626ba7e || // EIP 1271.\\n            _interfaceId == 0xd9b67a26 || // ERC165 interface ID for ERC1155.\\n            _interfaceId == 0x4e2312e0 || // ERC-1155 `ERC1155TokenReceiver` support.\\n            _interfaceId == 0xae029e0b || // Laser Wallet contract: bytes4(keccak256(\\\"I_AM_LASER\\\")).\\n            _interfaceId == 0x150b7a02; // ERC721 onErc721Received.\\n    }\\n}\\n\",\"keccak256\":\"0x45519dd5156f33e0918248c4e3dc38e1ddddf4d18c02fa744d3daac8ae21c4e2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IEIP1271.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IEIP1271\\n * @notice Interface to call external contracts to validate signature.\\n */\\ninterface IEIP1271 {\\n    /**\\n     * @dev Implementation of EIP 1271: https://eips.ethereum.org/EIPS/eip-1271.\\n     * @param hash Hash of a message signed on behalf of address(this).\\n     * @param signature Signature byte array associated with _msgHash.\\n     * @return Magic value  or reverts with an error message.\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xfcc98243eaf0e10b323a21e6aca691efec6f128e938f24e495e71cd47c421505\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IERC165\\n * @notice Support of ERC165.\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice Query if a contract implements an interface\\n     * @param interfaceID The interface identifier, as specified in ERC-165\\n     * @dev Interface identification is specified in ERC-165. This function\\n     * uses less than 30,000 gas.\\n     * @return `true` if the contract implements `interfaceID` and\\n     * interfaceID` is not 0xffffffff, `false` otherwise\\n     */\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdf3ddac29884e2c1f2d2fd322bacd6a6907721d3e0909af74cdedeac5c38a9f4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IHandler.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n///@title IHandler\\n///@notice Has all the external functions for Handler.sol.\\ninterface IHandler {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4);\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4 result);\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure returns (bytes4 result);\\n\\n    function tokensReceived(\\n        address,\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata,\\n        bytes calldata\\n    ) external pure;\\n}\\n\",\"keccak256\":\"0x19c901f32cc939793cc8b3bffcdf1245c77bee93d44b51930e78284ec20f01d7\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ILaserGuard.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @title  ILaserGuard\\n *\\n * @notice Common api interface for all Guard modules (parent and child).\\n */\\ninterface ILaserGuard {\\n    /**\\n     * @notice Verifies a Laser transaction.\\n     *         It calls all guard sub-modules with the 'verifyTransaction api'.\\n     *         Each sub-module implements its own logic. But the main purpose is to\\n     *         provide extra transaction security.\\n     *\\n     * @param wallet The address of the wallet: should be 'msg.sender'.\\n     * @param to                    Destination address.\\n     * @param value                 Amount in WEI to transfer.\\n     * @param callData              Data payload for the transaction.\\n     * @param nonce                 Anti-replay number.\\n     * @param maxFeePerGas          Maximum WEI the owner is willing to pay per unit of gas.\\n     * @param maxPriorityFeePerGas  Miner's tip.\\n     * @param gasLimit              Maximum amount of gas the owner is willing to use for this transaction.\\n     * @param signatures            The signature(s) of the hash of this transaction.\\n     */\\n    function verifyTransaction(\\n        address wallet,\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        bytes memory signatures\\n    ) external;\\n}\\n\",\"keccak256\":\"0x776f241f85fe5c687833dcc8f2e7c0d0a8520e3eefdaa905734daa0fa2fb0498\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILaserMasterGuard.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @title  ILaserMasterGuard\\n *\\n * @author Rodrigo Herrera I.\\n *\\n * @notice Parent guard module that calls child Laser guards.\\n *\\n * @dev    This interface has all events, errors, and external function for LaserMasterGuard.\\n */\\ninterface ILaserMasterGuard {\\n    // addGuardModule() custom errors.\\n    error LaserMasterGuard__addGuardModule__unauthorizedModule();\\n    error LaserMasterGuard__addGuardModule__overflow();\\n\\n    // removeGuardModule custom errors.\\n    error LaserMasterGuard__removeGuardModule__incorrectModule();\\n    error LaserMasterGuard__removeGuardModule__incorrectPrevModule();\\n\\n    /**\\n     * @notice Adds a new guard module.\\n     *         wallet is 'msg.sender'.\\n     *\\n     * @param module The address of the new module. It needs to be authorized in LaserRegistry.\\n     */\\n    function addGuardModule(address module) external;\\n\\n    /**\\n     * @notice Removes a guard module.\\n     * wallet is 'msg.sender'.\\n     *\\n     * @param prevModule    The address of the previous module on the linked list.\\n     * @param module        The address of the module to remove.\\n     */\\n    function removeGuardModule(\\n        address prevModule,\\n        address module,\\n        bytes calldata guardianSignature\\n    ) external;\\n\\n    /**\\n     * @notice Verifies a Laser transaction.\\n     *         It calls all guard sub-modules with the 'verifyTransaction api'.\\n     *         Each sub-module implements its own logic. But the main purpose is to\\n     *         provide extra transaction security.\\n     *\\n     * @param wallet                The address of the wallet: should be 'msg.sender'.\\n     * @param to                    Destination address.\\n     * @param value                 Amount in WEI to transfer.\\n     * @param callData              Data payload for the transaction.\\n     * @param nonce                 Anti-replay number.\\n     * @param maxFeePerGas          Maximum WEI the owner is willing to pay per unit of gas.\\n     * @param maxPriorityFeePerGas  Miner's tip.\\n     * @param gasLimit              Maximum amount of gas the owner is willing to use for this transaction.\\n     * @param signatures            The signature(s) of the hash of this transaction.\\n     */\\n    function verifyTransaction(\\n        address wallet,\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        bytes memory signatures\\n    ) external;\\n\\n    /**\\n     * @param wallet The requested address.\\n     *\\n     * @return The guard modules that belong to the requested address.\\n     */\\n    function getGuardModules(address wallet) external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xb83ea4a33b194ab69c799f07fcae1ce16d98bef6ea522ebf040fbd11e7e67767\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILaserRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\ninterface ILaserRegistry {\\n    function isSingleton(address singleton) external view returns (bool);\\n\\n    function isModule(address module) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x13388aa510cba63d240db97afa93547281dae0fb349e9676cb9692443e6f5acf\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ILaserState.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\ninterface ILaserState {\\n    ///@dev upgradeSingleton() custom error.\\n    error LaserState__upgradeSingleton__notLaser();\\n\\n    ///@dev initOwner() custom errors.\\n    error LaserState__initOwner__walletInitialized();\\n    error LaserState__initOwner__invalidAddress();\\n\\n    function singleton() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function laserMasterGuard() external view returns (address);\\n\\n    function laserRegistry() external view returns (address);\\n\\n    function isLocked() external view returns (bool);\\n\\n    function nonce() external view returns (uint256);\\n\\n    ///@notice Restricted, can only be called by the wallet or module.\\n    function changeOwner(address newOwner) external;\\n\\n    ///@notice Restricted, can only be called by the wallet.\\n    function addLaserModule(address newModule) external;\\n}\\n\",\"keccak256\":\"0xbd6b60c41c935f3b1384ef26a5002c9c6a0d46b75ff234b60dee66f1049f2467\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ILaserWallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @title  ILaserWallet\\n *\\n * @author Rodrigo Herrera I.\\n *\\n * @notice Laser is a modular smart contract wallet made for the Ethereum Virtual Machine.\\n *         It has modularity (programmability) and security at its core.\\n *\\n * @dev    This interface has all events, errors, and external function for LaserWallet.\\n */\\ninterface ILaserWallet {\\n    event Setup(address owner, address laserModule);\\n    event ExecSuccess(address to, uint256 value, uint256 nonce);\\n    event ExecFailure(address to, uint256 value, uint256 nonce);\\n\\n    // init() custom errors.\\n    error LW__init__notOwner();\\n    error LW__init__refundFailure();\\n\\n    // exec() custom errors.\\n    error LW__exec__invalidNonce();\\n    error LW__exec__walletLocked();\\n    error LW__exec__notOwner();\\n    error LW__exec__refundFailure();\\n\\n    // execFromModule() custom errors.\\n    error LW__execFromModule__unauthorizedModule();\\n    error LW__execFromModule__mainCallFailed();\\n    error LW__execFromModule__refundFailure();\\n\\n    // simulateTransaction() custom errors.\\n    error LW__SIMULATION__invalidNonce();\\n    error LW__SIMULATION__walletLocked();\\n    error LW__SIMULATION__notOwner();\\n    error LW__SIMULATION__refundFailure();\\n\\n    // isValidSignature() Laser custom error.\\n    error LaserWallet__invalidSignature();\\n\\n    struct Transaction {\\n        address to;\\n        uint256 value;\\n        bytes callData;\\n        uint256 nonce;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        uint256 gasLimit;\\n        address relayer;\\n        bytes signatures;\\n    }\\n\\n    /**\\n     * @notice Setup function, sets initial storage of the wallet.\\n     *         It can't be called after initialization.\\n     *\\n     * @param _owner                        The owner of the wallet.\\n     * @param maxFeePerGas                  Maximum WEI the owner is willing to pay per unit of gas.\\n     * @param maxPriorityFeePerGas          Miner's tip.\\n     * @param gasLimit                      Maximum amount of gas the owner is willing to use for this transaction.\\n     * @param relayer                       Address to refund for the inclusion of this transaction.\\n     * @param smartSocialRecoveryModule     Address of the initial module to setup -> Smart Social Recovery.\\n     * @param _laserMasterGuard             Address of the parent guard module 'LaserMasterGuard'.\\n     * @param laserVault                    Address of the guard sub-module 'LaserVault'.\\n     * @param _laserRegistry                Address of the Laser registry: module that keeps track of authorized modules.\\n     * @param smartSocialRecoveryInitData   Initialization data for the provided module.\\n     * @param ownerSignature                Signature of the owner that validates approval for initialization.\\n     */\\n    function init(\\n        address _owner,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        address relayer,\\n        address smartSocialRecoveryModule,\\n        address _laserMasterGuard,\\n        address laserVault,\\n        address _laserRegistry,\\n        bytes calldata smartSocialRecoveryInitData,\\n        bytes memory ownerSignature\\n    ) external;\\n\\n    /**\\n     * @notice Executes a generic transaction.\\n     *         If 'gasLimit' does not match the actual gas limit of the transaction, the relayer can incur losses.\\n     *         It is the relayer's responsability to make sure that they are the same,\\n     *         the user does not get affected if a mistake is made.\\n     *\\n     * @param to                    Destination address.\\n     * @param value                 Amount in WEI to transfer.\\n     * @param callData              Data payload for the transaction.\\n     * @param _nonce                Anti-replay number.\\n     * @param maxFeePerGas          Maximum WEI the owner is willing to pay per unit of gas.\\n     * @param maxPriorityFeePerGas  Miner's tip.\\n     * @param gasLimit              Maximum amount of gas the owner is willing to use for this transaction.\\n     * @param relayer               Address to refund for the inclusion of this transaction.\\n     * @param signatures            The signature(s) of the hash for this transaction.\\n     */\\n    function exec(\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 _nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        address relayer,\\n        bytes calldata signatures\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Executes a transaction from an authorized module.\\n     *         If 'gasLimit' does not match the actual gas limit of the transaction, the relayer can incur losses.\\n     *         It is the relayer's responsability to make sure that they are the same,\\n     *         the user does not get affected if a mistake is made.\\n     *\\n     * @param to                    Destination address.\\n     * @param value                 Amount in WEI to transfer.\\n     * @param callData              Data payload for the transaction.\\n     * @param maxFeePerGas          Maximum WEI the owner is willing to pay per unit of gas.\\n     * @param maxPriorityFeePerGas  Miner's tip.\\n     * @param gasLimit              Maximum amount of gas the owner is willing to use for this transaction.\\n     * @param relayer               Address to refund for the inclusion of this transaction.\\n     */\\n    function execFromModule(\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        address relayer\\n    ) external;\\n\\n    /**\\n     * @notice Simulates a transaction.\\n     *         It needs to be called off-chain from address(0).\\n     *\\n     * @param to                    Destination address.\\n     * @param value                 Amount in WEI to transfer.\\n     * @param callData              Data payload for the transaction.\\n     * @param _nonce                Anti-replay number.\\n     * @param maxFeePerGas          Maximum WEI the owner is willing to pay per unit of gas.\\n     * @param maxPriorityFeePerGas  Miner's tip.\\n     * @param gasLimit              Maximum amount of gas the owner is willing to use for this transaction.\\n     * @param relayer               Address to refund for the inclusion of this transaction.\\n     * @param signatures            The signature(s) of the hash of this transaction.\\n     *\\n     * @return gasUsed The gas used for this transaction.\\n     */\\n    function simulateTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 _nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        address relayer,\\n        bytes calldata signatures\\n    ) external returns (uint256 gasUsed);\\n\\n    /**\\n     * @notice Locks the wallet. Once locked, only the SSR module can unlock it or recover it.\\n     *\\n     * @dev Can only be called by address(this).\\n     */\\n    function lock() external;\\n\\n    /**\\n     * @notice Unlocks the wallet. Can only be unlocked or recovered from the SSR module.\\n     *\\n     * @dev Can only be called by address(this).\\n     */\\n    function unlock() external;\\n\\n    /**\\n     * @notice Should return whether the signature provided is valid for the provided hash.\\n     *\\n     * @param hash      Hash of the data to be signed.\\n     * @param signature Signature byte array associated with hash.\\n     *\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     *\\n     * @return Magic value if signature matches the owner's address and the wallet is not locked.\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4);\\n\\n    /**\\n     * @notice Returns the hash to be signed to execute a transaction.\\n     */\\n    function operationHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 _nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * @return chainId The chain id of this.\\n     */\\n    function getChainId() external view returns (uint256 chainId);\\n\\n    /**\\n     * @notice Domain separator for this wallet.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe5a0d3e19092f8fc36d505d25a092851022d6de398404975ca01acccf4319347\",\"license\":\"GPL-3.0\"},\"contracts/state/LaserState.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport \\\"../access/Access.sol\\\";\\nimport \\\"../common/Utils.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\nimport \\\"../interfaces/ILaserMasterGuard.sol\\\";\\nimport \\\"../interfaces/ILaserState.sol\\\";\\nimport \\\"../interfaces/ILaserRegistry.sol\\\";\\n\\n/////\\n///////// @todo Add 'removeModule', should be the signature of the owner + guardian\\n////////        or owner + recovery owner.\\n/////\\ncontract LaserState is ILaserState, Access {\\n    address internal constant POINTER = address(0x1); // Pointer for the link list.\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         Laser Wallet storage\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public singleton; // Base contract.\\n\\n    address public owner; // Owner of the wallet.\\n\\n    address public laserMasterGuard; // Parent module for guard sub modules.\\n\\n    address public laserRegistry; // Registry that keeps track of authorized modules (Laser and Guards).\\n\\n    bool public isLocked; // If the wallet is locked, only certain operations can unlock it.\\n\\n    uint256 public nonce; // Anti-replay number for signed transactions.\\n\\n    mapping(address => address) internal laserModules; // Mapping of authorized Laser modules.\\n\\n    /**\\n     * @notice Restricted, can only be called by the wallet 'address(this)' or module.\\n     *\\n     * @param newOwner  Address of the new owner.\\n     */\\n    function changeOwner(address newOwner) external access {\\n        owner = newOwner;\\n    }\\n\\n    /**\\n     * @notice Restricted, can only be called by the wallet 'address(this)' or module.\\n     *\\n     * @param newModule Address of a new authorized Laser module.\\n     */\\n    function addLaserModule(address newModule) external access {\\n        require(ILaserRegistry(laserRegistry).isModule(newModule), \\\"Invalid new module\\\");\\n        laserModules[newModule] = laserModules[POINTER];\\n        laserModules[POINTER] = newModule;\\n    }\\n\\n    function upgradeSingleton(address _singleton) external access {\\n        //@todo Change require for custom errrors.\\n        require(_singleton != address(this), \\\"Invalid singleton\\\");\\n        require(ILaserRegistry(laserRegistry).isSingleton(_singleton), \\\"Invalid master copy\\\");\\n        singleton = _singleton;\\n    }\\n\\n    function activateWallet(\\n        address _owner,\\n        address smartSocialRecoveryModule,\\n        address _laserMasterGuard,\\n        address laserVault,\\n        address _laserRegistry,\\n        bytes calldata smartSocialRecoveryInitData\\n    ) internal {\\n        // If owner is not address 0, the wallet was already initialized.\\n        if (owner != address(0)) revert LaserState__initOwner__walletInitialized();\\n\\n        if (_owner.code.length != 0 || _owner == address(0)) revert LaserState__initOwner__invalidAddress();\\n\\n        // We set the owner.\\n        owner = _owner;\\n\\n        // check that the module is accepted.\\n        laserMasterGuard = _laserMasterGuard;\\n        laserRegistry = _laserRegistry;\\n\\n        require(ILaserRegistry(laserRegistry).isModule(smartSocialRecoveryModule), \\\"Module not authorized\\\");\\n        bool success = Utils.call(smartSocialRecoveryModule, 0, smartSocialRecoveryInitData, gasleft());\\n        require(success);\\n        laserModules[smartSocialRecoveryModule] = POINTER;\\n\\n        // We add the guard module.\\n        ILaserMasterGuard(_laserMasterGuard).addGuardModule(laserVault);\\n    }\\n}\\n\",\"keccak256\":\"0x27c59abba68303334925e8b943e801e9243ce5448a05354a28f638d4ddefb525\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600180546001600160a01b03191630179055612495806100326000396000f3fe6080604052600436106101af5760003560e01c80638da5cb5b116100ec578063affed0e01161008a578063f23a6e6111610064578063f23a6e6114610522578063f698da251461054f578063f83d08ba146105b6578063ffa1ad74146105cb57600080fd5b8063affed0e0146104bd578063b62654fb146104d3578063bc197c81146104f357600080fd5b8063a3f4df7e116100c6578063a3f4df7e14610411578063a4e2d63414610467578063a69df4b514610488578063a6f9dae11461049d57600080fd5b80638da5cb5b146103b157806399e1bebb146103d15780639aec6456146103f157600080fd5b806323d43c16116101595780633408e470116101335780633408e470146103345780635e8ec01914610351578063670d046e14610371578063816e10671461039157600080fd5b806323d43c16146102bc57806329b44f08146102dc5780632e178992146102fc57600080fd5b806310e888921161018a57806310e8889214610237578063150b7a02146102575780631626ba7e1461029c57600080fd5b806223de29146101bb57806301ffc9a7146101e2578063022ba3021461021757600080fd5b366101b657005b600080fd5b3480156101c757600080fd5b506101e06101d6366004611b2e565b5050505050505050565b005b3480156101ee57600080fd5b506102026101fd366004611bf2565b610614565b60405190151581526020015b60405180910390f35b34801561022357600080fd5b506101e0610232366004611c16565b6106b7565b34801561024357600080fd5b506101e0610252366004611c16565b6107f9565b34801561026357600080fd5b50610283610272366004611c31565b630a85bd0160e11b95945050505050565b6040516001600160e01b0319909116815260200161020e565b3480156102a857600080fd5b506102836102b7366004611d43565b61094d565b3480156102c857600080fd5b506101e06102d7366004611d8a565b6109cc565b3480156102e857600080fd5b506101e06102f7366004611e59565b610b6b565b34801561030857600080fd5b5060035461031c906001600160a01b031681565b6040516001600160a01b03909116815260200161020e565b34801561034057600080fd5b50465b60405190815260200161020e565b34801561035d57600080fd5b506101e061036c366004611e9b565b610c3d565b34801561037d57600080fd5b5061034361038c366004611f92565b610da7565b34801561039d57600080fd5b506102026103ac36600461200f565b610dce565b3480156103bd57600080fd5b5060015461031c906001600160a01b031681565b3480156103dd57600080fd5b5060025461031c906001600160a01b031681565b3480156103fd57600080fd5b5061034361040c36600461200f565b6110cc565b34801561041d57600080fd5b5061045a6040518060400160405280600c81526020017f4c617365722057616c6c6574000000000000000000000000000000000000000081525081565b60405161020e919061211b565b34801561047357600080fd5b5060035461020290600160a01b900460ff1681565b34801561049457600080fd5b506101e0611434565b3480156104a957600080fd5b506101e06104b8366004611c16565b611463565b3480156104c957600080fd5b5061034360045481565b3480156104df57600080fd5b5060005461031c906001600160a01b031681565b3480156104ff57600080fd5b5061028361050e36600461212e565b63bc197c8160e01b98975050505050505050565b34801561052e57600080fd5b5061028361053d3660046121c8565b63f23a6e6160e01b9695505050505050565b34801561055b57600080fd5b5061034360007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692184660408051602081019390935282015230606082015260800160405160208183030381529060405280519060200120905090565b3480156105c257600080fd5b506101e06114a5565b3480156105d757600080fd5b5061045a6040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b60006301ffc9a760e01b6001600160e01b0319831614806106455750630b135d3f60e11b6001600160e01b03198316145b806106605750636cdb3d1360e11b6001600160e01b03198316145b8061067b5750630271189760e51b6001600160e01b03198316145b80610696575063ae029e0b60e01b6001600160e01b03198316145b806106b15750630a85bd0160e11b6001600160e01b03198316145b92915050565b3330146106d75760405163bc8bd71160e01b815260040160405180910390fd5b6003546040516342f6e38960e01b81526001600160a01b038381166004830152909116906342f6e38990602401602060405180830381865afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107459190612240565b6107965760405162461bcd60e51b815260206004820152601260248201527f496e76616c6964206e6577206d6f64756c65000000000000000000000000000060448201526064015b60405180910390fd5b60056020527f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017b80546001600160a01b039283166000818152604081208054959093166001600160a01b031995861617909255600190915281549092169091179055565b3330146108195760405163bc8bd71160e01b815260040160405180910390fd5b306001600160a01b038216036108715760405162461bcd60e51b815260206004820152601160248201527f496e76616c69642073696e676c65746f6e000000000000000000000000000000604482015260640161078d565b60035460405163de2e643360e01b81526001600160a01b0383811660048301529091169063de2e643390602401602060405180830381865afa1580156108bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108df9190612240565b61092b5760405162461bcd60e51b815260206004820152601360248201527f496e76616c6964206d617374657220636f707900000000000000000000000000604482015260640161078d565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008061095c848460006114da565b6001549091506001600160a01b0380831691161415806109855750600354600160a01b900460ff165b156109a3576040516325dc3e7760e21b815260040160405180910390fd5b507f1626ba7e356f5979dd355a3d2bfb43e80420a480c3b854edce286a82d74968699392505050565b600480546001019055336000908152600560205260409020546001600160a01b0316610a0b57604051633d53698b60e21b815260040160405180910390fd5b6000610a5c898989898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612710925050505a610a579190612278565b611732565b905080610a7c576040516350b9c67960e11b815260040160405180910390fd5b8215610b60576000610a8f60643a61228f565b610a9a9060066122b1565b90506000610aa8823a6122d0565b90506040610ab786603f6122b1565b610ac1919061228f565b945060005a610ad09087612278565b610adc90611b586122d0565b90506000610aea83836122b1565b9050610b3b6001600160a01b03871615610b045786610b06565b325b8260005b6040519080825280601f01601f191660200182016040528015610b34576020820181803683370190505b505a611732565b945084610b5b57604051631ecc36f960e21b815260040160405180910390fd5b505050505b505050505050505050565b8060005b81811015610c375736848483818110610b8a57610b8a6122e8565b9050602002810190610b9c91906122fe565b9050610c2d610bae6020830183611c16565b6020830135610bc0604085018561231f565b6060860135608087013560a088013560c0890135610be56101008b0160e08c01611c16565b610bf36101008c018c61231f565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610dce92505050565b5050600101610b6f565b50505050565b610c4c8c88888888888861174a565b6040805160208082018e90528183018d905260608083018d905246608084015230901b6bffffffffffffffffffffffff191660a08301528251808303609401815260b490920190925280519101206000610ca78284836114da565b90508d6001600160a01b0316816001600160a01b031614610cdb57604051637b0dd98160e01b815260040160405180910390fd5b50508815610d99576000610cf060643a61228f565b610cfb9060066122b1565b90506000610d09823a6122d0565b9050610c80610d1a8c610c4e6122b1565b610d24919061228f565b9a5060005a610d33908d612278565b610d3f90611f406122d0565b90506000610d4d83836122b1565b90506000610d736001600160a01b038e1615610d69578d610d6b565b325b836000610b0a565b905080610d935760405163230f54c560e01b815260040160405180910390fd5b50505050505b505050505050505050505050565b6000610db98989898989898989611960565b80519060200120905098975050505050505050565b60048054600181019091556000908714610dfb57604051636f4f3db760e11b815260040160405180910390fd5b600354600160a01b900460ff1615610e2657604051632e28c77b60e21b815260040160405180910390fd5b6000610e388c8c8c8c8c8c8c8c611960565b8051906020012090506000610e4f828560006114da565b6001549091506001600160a01b03808316911614610e8057604051630168785160e01b815260040160405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663167cd182308f8f8f8f8f8f8f8f8e6040518b63ffffffff1660e01b8152600401610ed39a99989796959493929190612366565b600060405180830381600087803b158015610eed57600080fd5b505af1158015610f01573d6000803e3d6000fd5b50505050610f4f8d8d8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612710925050505a610a579190612278565b92508215610fb5577f1575d4076918636381fe626ba9076459080815fb43c05c127c6e6b0370d62f4a8d8d600454604051610fa8939291906001600160a01b039390931683526020830191909152604082015260600190565b60405180910390a161100f565b7f84a65ac305e8f45f7974e75262e5da051587352d6dcb4719702dd02a8b5038308d8d600454604051611006939291906001600160a01b039390931683526020830191909152604082015260600190565b60405180910390a15b85156110bc57600061102260643a61228f565b61102d9060066122b1565b9050600061103b823a6122d0565b9050604061104a89603f6122b1565b611054919061228f565b975060005a611063908a612278565b61106f90611b586122d0565b9050600061107d83836122b1565b90506110976001600160a01b038a1615610b045789610b06565b9650866110b7576040516303c62d8160e41b815260040160405180910390fd5b505050505b50509a9950505050505050505050565b600480546001810190915560009087146110f95760405163372d84dd60e11b815260040160405180910390fd5b600354600160a01b900460ff16156111245760405163150fed3960e01b815260040160405180910390fd5b60006111368c8c8c8c8c8c8c8c611960565b805190602001209050600061114d828560006114da565b6001549091506001600160a01b0380831691161461117e57604051630a50009b60e31b815260040160405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663167cd182308f8f8f8f8f8f8f8f8e6040518b63ffffffff1660e01b81526004016111d19a99989796959493929190612366565b600060405180830381600087803b1580156111eb57600080fd5b505af11580156111ff573d6000803e3d6000fd5b50505050600061124f8e8e8e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612710925050505a610a579190612278565b905080156112b5577f1575d4076918636381fe626ba9076459080815fb43c05c127c6e6b0370d62f4a8e8e6004546040516112a8939291906001600160a01b039390931683526020830191909152604082015260600190565b60405180910390a161130f565b7f84a65ac305e8f45f7974e75262e5da051587352d6dcb4719702dd02a8b5038308e8e600454604051611306939291906001600160a01b039390931683526020830191909152604082015260600190565b60405180910390a15b86156113bc57600061132260643a61228f565b61132d9060066122b1565b9050600061133b823a6122d0565b9050604061134a8a603f6122b1565b611354919061228f565b985060005a611363908b612278565b61136f90611b586122d0565b9050600061137d83836122b1565b90506113976001600160a01b038b1615610b04578a610b06565b9450846113b75760405163f958fa3560e01b815260040160405180910390fd5b505050505b5a6113c79088612278565b935033156114235760405162461bcd60e51b8152602060048201526024808201527f4d7573742062652063616c6c6564206f66662d636861696e2066726f6d20302060448201526330b2323960e11b606482015260840161078d565b5050509a9950505050505050505050565b3330146114545760405163bc8bd71160e01b815260040160405180910390fd5b6003805460ff60a01b19169055565b3330146114835760405163bc8bd71160e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b3330146114c55760405163bc8bd71160e01b815260040160405180910390fd5b6003805460ff60a01b1916600160a01b179055565b60008060008061150486866041020160208101516040820151606090920151909260009190911a90565b9194509250905060ff81166000036115dc57604051630b135d3f60e11b81529293508392868301602001906001600160a01b03851690631626ba7e90611550908b9085906004016123ee565b602060405180830381865afa15801561156d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611591919061240f565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916631626ba7e60e01b146115d6576040516340aec60f60e11b815260040160405180910390fd5b50611701565b601e8160ff1611156116a1576040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101889052600190605c0160405160208183030381529060405280519060200120600483611641919061242c565b6040805160008152602081018083529390935260ff90911690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611690573d6000803e3d6000fd5b505050602060405103519350611701565b60408051600081526020810180835289905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa1580156116f4573d6000803e3d6000fd5b5050506020604051035193505b6001600160a01b0384166117285760405163b9bf1d7d60e01b815260040160405180910390fd5b5050509392505050565b6000806000845160208601878987f195945050505050565b6001546001600160a01b03161561177457604051638b151fc760e01b815260040160405180910390fd5b6001600160a01b0387163b15158061179357506001600160a01b038716155b156117b15760405163026ee2f760e21b815260040160405180910390fd5b600180546001600160a01b038981166001600160a01b03199283161790925560028054888416908316179055600380548684169216821790556040516342f6e38960e01b81529188166004830152906342f6e38990602401602060405180830381865afa158015611826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184a9190612240565b6118965760405162461bcd60e51b815260206004820152601560248201527f4d6f64756c65206e6f7420617574686f72697a65640000000000000000000000604482015260640161078d565b60006118da87600085858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050505a611732565b9050806118e657600080fd5b6001600160a01b038781166000908152600560205260409081902080546001600160a01b0319166001179055516374c69e7160e11b815286821660048201529087169063e98d3ce290602401600060405180830381600087803b15801561194c57600080fd5b505af1158015610d99573d6000803e3d6000fd5b606060007f4c23aa2497696888af245e4eb8d524e7d4cc862b760e1c988678274066ffff8b8a8a8a8a60405161199792919061244f565b6040805191829003822060208301959095526001600160a01b03909316928101929092526060820152608081019190915260a0810187905260c0810186905260e0810185905261010081018490526101200160408051601f1981840301815291905280516020909101209050601960f81b600160f81b611a6760007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692184660408051602081019390935282015230606082015260800160405160208183030381529060405280519060200120905090565b6040517fff00000000000000000000000000000000000000000000000000000000000000938416602082015292909116602183015260228201526042810182905260620160405160208183030381529060405291505098975050505050505050565b80356001600160a01b0381168114611ae057600080fd5b919050565b60008083601f840112611af757600080fd5b50813567ffffffffffffffff811115611b0f57600080fd5b602083019150836020828501011115611b2757600080fd5b9250929050565b60008060008060008060008060c0898b031215611b4a57600080fd5b611b5389611ac9565b9750611b6160208a01611ac9565b9650611b6f60408a01611ac9565b955060608901359450608089013567ffffffffffffffff80821115611b9357600080fd5b611b9f8c838d01611ae5565b909650945060a08b0135915080821115611bb857600080fd5b50611bc58b828c01611ae5565b999c989b5096995094979396929594505050565b6001600160e01b031981168114611bef57600080fd5b50565b600060208284031215611c0457600080fd5b8135611c0f81611bd9565b9392505050565b600060208284031215611c2857600080fd5b611c0f82611ac9565b600080600080600060808688031215611c4957600080fd5b611c5286611ac9565b9450611c6060208701611ac9565b935060408601359250606086013567ffffffffffffffff811115611c8357600080fd5b611c8f88828901611ae5565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611cc757600080fd5b813567ffffffffffffffff80821115611ce257611ce2611ca0565b604051601f8301601f19908116603f01168101908282118183101715611d0a57611d0a611ca0565b81604052838152866020858801011115611d2357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215611d5657600080fd5b82359150602083013567ffffffffffffffff811115611d7457600080fd5b611d8085828601611cb6565b9150509250929050565b60008060008060008060008060e0898b031215611da657600080fd5b611daf89611ac9565b975060208901359650604089013567ffffffffffffffff811115611dd257600080fd5b611dde8b828c01611ae5565b909750955050606089013593506080890135925060a08901359150611e0560c08a01611ac9565b90509295985092959890939650565b60008083601f840112611e2657600080fd5b50813567ffffffffffffffff811115611e3e57600080fd5b6020830191508360208260051b8501011115611b2757600080fd5b60008060208385031215611e6c57600080fd5b823567ffffffffffffffff811115611e8357600080fd5b611e8f85828601611e14565b90969095509350505050565b6000806000806000806000806000806000806101608d8f031215611ebe57600080fd5b611ec78d611ac9565b9b5060208d01359a5060408d0135995060608d01359850611eea60808e01611ac9565b9750611ef860a08e01611ac9565b9650611f0660c08e01611ac9565b9550611f1460e08e01611ac9565b9450611f236101008e01611ac9565b935067ffffffffffffffff6101208e01351115611f3f57600080fd5b611f508e6101208f01358f01611ae5565b909350915067ffffffffffffffff6101408e01351115611f6f57600080fd5b611f808e6101408f01358f01611cb6565b90509295989b509295989b509295989b565b60008060008060008060008060e0898b031215611fae57600080fd5b611fb789611ac9565b975060208901359650604089013567ffffffffffffffff811115611fda57600080fd5b611fe68b828c01611ae5565b999c989b50996060810135986080820135985060a0820135975060c09091013595509350505050565b6000806000806000806000806000806101208b8d03121561202f57600080fd5b6120388b611ac9565b995060208b0135985060408b013567ffffffffffffffff8082111561205c57600080fd5b6120688e838f01611ae5565b909a50985060608d0135975060808d0135965060a08d0135955060c08d0135945088915061209860e08e01611ac9565b93506101008d01359150808211156120af57600080fd5b506120bc8d828e01611cb6565b9150509295989b9194979a5092959850565b6000815180845260005b818110156120f4576020818501810151868301820152016120d8565b81811115612106576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611c0f60208301846120ce565b60008060008060008060008060a0898b03121561214a57600080fd5b61215389611ac9565b975061216160208a01611ac9565b9650604089013567ffffffffffffffff8082111561217e57600080fd5b61218a8c838d01611e14565b909850965060608b01359150808211156121a357600080fd5b6121af8c838d01611e14565b909650945060808b0135915080821115611bb857600080fd5b60008060008060008060a087890312156121e157600080fd5b6121ea87611ac9565b95506121f860208801611ac9565b94506040870135935060608701359250608087013567ffffffffffffffff81111561222257600080fd5b61222e89828a01611ae5565b979a9699509497509295939492505050565b60006020828403121561225257600080fd5b81518015158114611c0f57600080fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561228a5761228a612262565b500390565b6000826122ac57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156122cb576122cb612262565b500290565b600082198211156122e3576122e3612262565b500190565b634e487b7160e01b600052603260045260246000fd5b6000823561011e1983360301811261231557600080fd5b9190910192915050565b6000808335601e1984360301811261233657600080fd5b83018035915067ffffffffffffffff82111561235157600080fd5b602001915036819003821315611b2757600080fd5b6001600160a01b038b811682528a166020820152604081018990526101206060820181905281018790526000610140888a828501376000818a85010152601f19601f8a011683018860808501528760a08501528660c08501528560e085015281848203016101008501526123dc828201866120ce565b9e9d5050505050505050505050505050565b82815260406020820152600061240760408301846120ce565b949350505050565b60006020828403121561242157600080fd5b8151611c0f81611bd9565b600060ff821660ff84168082101561244657612446612262565b90039392505050565b818382376000910190815291905056fea26469706673582212203b4670d303d830ab6e75c4eb634ef4bfe59db3d98e614261f3c038fa23f6726c64736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106101af5760003560e01c80638da5cb5b116100ec578063affed0e01161008a578063f23a6e6111610064578063f23a6e6114610522578063f698da251461054f578063f83d08ba146105b6578063ffa1ad74146105cb57600080fd5b8063affed0e0146104bd578063b62654fb146104d3578063bc197c81146104f357600080fd5b8063a3f4df7e116100c6578063a3f4df7e14610411578063a4e2d63414610467578063a69df4b514610488578063a6f9dae11461049d57600080fd5b80638da5cb5b146103b157806399e1bebb146103d15780639aec6456146103f157600080fd5b806323d43c16116101595780633408e470116101335780633408e470146103345780635e8ec01914610351578063670d046e14610371578063816e10671461039157600080fd5b806323d43c16146102bc57806329b44f08146102dc5780632e178992146102fc57600080fd5b806310e888921161018a57806310e8889214610237578063150b7a02146102575780631626ba7e1461029c57600080fd5b806223de29146101bb57806301ffc9a7146101e2578063022ba3021461021757600080fd5b366101b657005b600080fd5b3480156101c757600080fd5b506101e06101d6366004611b2e565b5050505050505050565b005b3480156101ee57600080fd5b506102026101fd366004611bf2565b610614565b60405190151581526020015b60405180910390f35b34801561022357600080fd5b506101e0610232366004611c16565b6106b7565b34801561024357600080fd5b506101e0610252366004611c16565b6107f9565b34801561026357600080fd5b50610283610272366004611c31565b630a85bd0160e11b95945050505050565b6040516001600160e01b0319909116815260200161020e565b3480156102a857600080fd5b506102836102b7366004611d43565b61094d565b3480156102c857600080fd5b506101e06102d7366004611d8a565b6109cc565b3480156102e857600080fd5b506101e06102f7366004611e59565b610b6b565b34801561030857600080fd5b5060035461031c906001600160a01b031681565b6040516001600160a01b03909116815260200161020e565b34801561034057600080fd5b50465b60405190815260200161020e565b34801561035d57600080fd5b506101e061036c366004611e9b565b610c3d565b34801561037d57600080fd5b5061034361038c366004611f92565b610da7565b34801561039d57600080fd5b506102026103ac36600461200f565b610dce565b3480156103bd57600080fd5b5060015461031c906001600160a01b031681565b3480156103dd57600080fd5b5060025461031c906001600160a01b031681565b3480156103fd57600080fd5b5061034361040c36600461200f565b6110cc565b34801561041d57600080fd5b5061045a6040518060400160405280600c81526020017f4c617365722057616c6c6574000000000000000000000000000000000000000081525081565b60405161020e919061211b565b34801561047357600080fd5b5060035461020290600160a01b900460ff1681565b34801561049457600080fd5b506101e0611434565b3480156104a957600080fd5b506101e06104b8366004611c16565b611463565b3480156104c957600080fd5b5061034360045481565b3480156104df57600080fd5b5060005461031c906001600160a01b031681565b3480156104ff57600080fd5b5061028361050e36600461212e565b63bc197c8160e01b98975050505050505050565b34801561052e57600080fd5b5061028361053d3660046121c8565b63f23a6e6160e01b9695505050505050565b34801561055b57600080fd5b5061034360007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692184660408051602081019390935282015230606082015260800160405160208183030381529060405280519060200120905090565b3480156105c257600080fd5b506101e06114a5565b3480156105d757600080fd5b5061045a6040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b60006301ffc9a760e01b6001600160e01b0319831614806106455750630b135d3f60e11b6001600160e01b03198316145b806106605750636cdb3d1360e11b6001600160e01b03198316145b8061067b5750630271189760e51b6001600160e01b03198316145b80610696575063ae029e0b60e01b6001600160e01b03198316145b806106b15750630a85bd0160e11b6001600160e01b03198316145b92915050565b3330146106d75760405163bc8bd71160e01b815260040160405180910390fd5b6003546040516342f6e38960e01b81526001600160a01b038381166004830152909116906342f6e38990602401602060405180830381865afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107459190612240565b6107965760405162461bcd60e51b815260206004820152601260248201527f496e76616c6964206e6577206d6f64756c65000000000000000000000000000060448201526064015b60405180910390fd5b60056020527f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017b80546001600160a01b039283166000818152604081208054959093166001600160a01b031995861617909255600190915281549092169091179055565b3330146108195760405163bc8bd71160e01b815260040160405180910390fd5b306001600160a01b038216036108715760405162461bcd60e51b815260206004820152601160248201527f496e76616c69642073696e676c65746f6e000000000000000000000000000000604482015260640161078d565b60035460405163de2e643360e01b81526001600160a01b0383811660048301529091169063de2e643390602401602060405180830381865afa1580156108bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108df9190612240565b61092b5760405162461bcd60e51b815260206004820152601360248201527f496e76616c6964206d617374657220636f707900000000000000000000000000604482015260640161078d565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008061095c848460006114da565b6001549091506001600160a01b0380831691161415806109855750600354600160a01b900460ff165b156109a3576040516325dc3e7760e21b815260040160405180910390fd5b507f1626ba7e356f5979dd355a3d2bfb43e80420a480c3b854edce286a82d74968699392505050565b600480546001019055336000908152600560205260409020546001600160a01b0316610a0b57604051633d53698b60e21b815260040160405180910390fd5b6000610a5c898989898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612710925050505a610a579190612278565b611732565b905080610a7c576040516350b9c67960e11b815260040160405180910390fd5b8215610b60576000610a8f60643a61228f565b610a9a9060066122b1565b90506000610aa8823a6122d0565b90506040610ab786603f6122b1565b610ac1919061228f565b945060005a610ad09087612278565b610adc90611b586122d0565b90506000610aea83836122b1565b9050610b3b6001600160a01b03871615610b045786610b06565b325b8260005b6040519080825280601f01601f191660200182016040528015610b34576020820181803683370190505b505a611732565b945084610b5b57604051631ecc36f960e21b815260040160405180910390fd5b505050505b505050505050505050565b8060005b81811015610c375736848483818110610b8a57610b8a6122e8565b9050602002810190610b9c91906122fe565b9050610c2d610bae6020830183611c16565b6020830135610bc0604085018561231f565b6060860135608087013560a088013560c0890135610be56101008b0160e08c01611c16565b610bf36101008c018c61231f565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610dce92505050565b5050600101610b6f565b50505050565b610c4c8c88888888888861174a565b6040805160208082018e90528183018d905260608083018d905246608084015230901b6bffffffffffffffffffffffff191660a08301528251808303609401815260b490920190925280519101206000610ca78284836114da565b90508d6001600160a01b0316816001600160a01b031614610cdb57604051637b0dd98160e01b815260040160405180910390fd5b50508815610d99576000610cf060643a61228f565b610cfb9060066122b1565b90506000610d09823a6122d0565b9050610c80610d1a8c610c4e6122b1565b610d24919061228f565b9a5060005a610d33908d612278565b610d3f90611f406122d0565b90506000610d4d83836122b1565b90506000610d736001600160a01b038e1615610d69578d610d6b565b325b836000610b0a565b905080610d935760405163230f54c560e01b815260040160405180910390fd5b50505050505b505050505050505050505050565b6000610db98989898989898989611960565b80519060200120905098975050505050505050565b60048054600181019091556000908714610dfb57604051636f4f3db760e11b815260040160405180910390fd5b600354600160a01b900460ff1615610e2657604051632e28c77b60e21b815260040160405180910390fd5b6000610e388c8c8c8c8c8c8c8c611960565b8051906020012090506000610e4f828560006114da565b6001549091506001600160a01b03808316911614610e8057604051630168785160e01b815260040160405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663167cd182308f8f8f8f8f8f8f8f8e6040518b63ffffffff1660e01b8152600401610ed39a99989796959493929190612366565b600060405180830381600087803b158015610eed57600080fd5b505af1158015610f01573d6000803e3d6000fd5b50505050610f4f8d8d8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612710925050505a610a579190612278565b92508215610fb5577f1575d4076918636381fe626ba9076459080815fb43c05c127c6e6b0370d62f4a8d8d600454604051610fa8939291906001600160a01b039390931683526020830191909152604082015260600190565b60405180910390a161100f565b7f84a65ac305e8f45f7974e75262e5da051587352d6dcb4719702dd02a8b5038308d8d600454604051611006939291906001600160a01b039390931683526020830191909152604082015260600190565b60405180910390a15b85156110bc57600061102260643a61228f565b61102d9060066122b1565b9050600061103b823a6122d0565b9050604061104a89603f6122b1565b611054919061228f565b975060005a611063908a612278565b61106f90611b586122d0565b9050600061107d83836122b1565b90506110976001600160a01b038a1615610b045789610b06565b9650866110b7576040516303c62d8160e41b815260040160405180910390fd5b505050505b50509a9950505050505050505050565b600480546001810190915560009087146110f95760405163372d84dd60e11b815260040160405180910390fd5b600354600160a01b900460ff16156111245760405163150fed3960e01b815260040160405180910390fd5b60006111368c8c8c8c8c8c8c8c611960565b805190602001209050600061114d828560006114da565b6001549091506001600160a01b0380831691161461117e57604051630a50009b60e31b815260040160405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663167cd182308f8f8f8f8f8f8f8f8e6040518b63ffffffff1660e01b81526004016111d19a99989796959493929190612366565b600060405180830381600087803b1580156111eb57600080fd5b505af11580156111ff573d6000803e3d6000fd5b50505050600061124f8e8e8e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612710925050505a610a579190612278565b905080156112b5577f1575d4076918636381fe626ba9076459080815fb43c05c127c6e6b0370d62f4a8e8e6004546040516112a8939291906001600160a01b039390931683526020830191909152604082015260600190565b60405180910390a161130f565b7f84a65ac305e8f45f7974e75262e5da051587352d6dcb4719702dd02a8b5038308e8e600454604051611306939291906001600160a01b039390931683526020830191909152604082015260600190565b60405180910390a15b86156113bc57600061132260643a61228f565b61132d9060066122b1565b9050600061133b823a6122d0565b9050604061134a8a603f6122b1565b611354919061228f565b985060005a611363908b612278565b61136f90611b586122d0565b9050600061137d83836122b1565b90506113976001600160a01b038b1615610b04578a610b06565b9450846113b75760405163f958fa3560e01b815260040160405180910390fd5b505050505b5a6113c79088612278565b935033156114235760405162461bcd60e51b8152602060048201526024808201527f4d7573742062652063616c6c6564206f66662d636861696e2066726f6d20302060448201526330b2323960e11b606482015260840161078d565b5050509a9950505050505050505050565b3330146114545760405163bc8bd71160e01b815260040160405180910390fd5b6003805460ff60a01b19169055565b3330146114835760405163bc8bd71160e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b3330146114c55760405163bc8bd71160e01b815260040160405180910390fd5b6003805460ff60a01b1916600160a01b179055565b60008060008061150486866041020160208101516040820151606090920151909260009190911a90565b9194509250905060ff81166000036115dc57604051630b135d3f60e11b81529293508392868301602001906001600160a01b03851690631626ba7e90611550908b9085906004016123ee565b602060405180830381865afa15801561156d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611591919061240f565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916631626ba7e60e01b146115d6576040516340aec60f60e11b815260040160405180910390fd5b50611701565b601e8160ff1611156116a1576040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101889052600190605c0160405160208183030381529060405280519060200120600483611641919061242c565b6040805160008152602081018083529390935260ff90911690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611690573d6000803e3d6000fd5b505050602060405103519350611701565b60408051600081526020810180835289905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa1580156116f4573d6000803e3d6000fd5b5050506020604051035193505b6001600160a01b0384166117285760405163b9bf1d7d60e01b815260040160405180910390fd5b5050509392505050565b6000806000845160208601878987f195945050505050565b6001546001600160a01b03161561177457604051638b151fc760e01b815260040160405180910390fd5b6001600160a01b0387163b15158061179357506001600160a01b038716155b156117b15760405163026ee2f760e21b815260040160405180910390fd5b600180546001600160a01b038981166001600160a01b03199283161790925560028054888416908316179055600380548684169216821790556040516342f6e38960e01b81529188166004830152906342f6e38990602401602060405180830381865afa158015611826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184a9190612240565b6118965760405162461bcd60e51b815260206004820152601560248201527f4d6f64756c65206e6f7420617574686f72697a65640000000000000000000000604482015260640161078d565b60006118da87600085858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050505a611732565b9050806118e657600080fd5b6001600160a01b038781166000908152600560205260409081902080546001600160a01b0319166001179055516374c69e7160e11b815286821660048201529087169063e98d3ce290602401600060405180830381600087803b15801561194c57600080fd5b505af1158015610d99573d6000803e3d6000fd5b606060007f4c23aa2497696888af245e4eb8d524e7d4cc862b760e1c988678274066ffff8b8a8a8a8a60405161199792919061244f565b6040805191829003822060208301959095526001600160a01b03909316928101929092526060820152608081019190915260a0810187905260c0810186905260e0810185905261010081018490526101200160408051601f1981840301815291905280516020909101209050601960f81b600160f81b611a6760007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692184660408051602081019390935282015230606082015260800160405160208183030381529060405280519060200120905090565b6040517fff00000000000000000000000000000000000000000000000000000000000000938416602082015292909116602183015260228201526042810182905260620160405160208183030381529060405291505098975050505050505050565b80356001600160a01b0381168114611ae057600080fd5b919050565b60008083601f840112611af757600080fd5b50813567ffffffffffffffff811115611b0f57600080fd5b602083019150836020828501011115611b2757600080fd5b9250929050565b60008060008060008060008060c0898b031215611b4a57600080fd5b611b5389611ac9565b9750611b6160208a01611ac9565b9650611b6f60408a01611ac9565b955060608901359450608089013567ffffffffffffffff80821115611b9357600080fd5b611b9f8c838d01611ae5565b909650945060a08b0135915080821115611bb857600080fd5b50611bc58b828c01611ae5565b999c989b5096995094979396929594505050565b6001600160e01b031981168114611bef57600080fd5b50565b600060208284031215611c0457600080fd5b8135611c0f81611bd9565b9392505050565b600060208284031215611c2857600080fd5b611c0f82611ac9565b600080600080600060808688031215611c4957600080fd5b611c5286611ac9565b9450611c6060208701611ac9565b935060408601359250606086013567ffffffffffffffff811115611c8357600080fd5b611c8f88828901611ae5565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611cc757600080fd5b813567ffffffffffffffff80821115611ce257611ce2611ca0565b604051601f8301601f19908116603f01168101908282118183101715611d0a57611d0a611ca0565b81604052838152866020858801011115611d2357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215611d5657600080fd5b82359150602083013567ffffffffffffffff811115611d7457600080fd5b611d8085828601611cb6565b9150509250929050565b60008060008060008060008060e0898b031215611da657600080fd5b611daf89611ac9565b975060208901359650604089013567ffffffffffffffff811115611dd257600080fd5b611dde8b828c01611ae5565b909750955050606089013593506080890135925060a08901359150611e0560c08a01611ac9565b90509295985092959890939650565b60008083601f840112611e2657600080fd5b50813567ffffffffffffffff811115611e3e57600080fd5b6020830191508360208260051b8501011115611b2757600080fd5b60008060208385031215611e6c57600080fd5b823567ffffffffffffffff811115611e8357600080fd5b611e8f85828601611e14565b90969095509350505050565b6000806000806000806000806000806000806101608d8f031215611ebe57600080fd5b611ec78d611ac9565b9b5060208d01359a5060408d0135995060608d01359850611eea60808e01611ac9565b9750611ef860a08e01611ac9565b9650611f0660c08e01611ac9565b9550611f1460e08e01611ac9565b9450611f236101008e01611ac9565b935067ffffffffffffffff6101208e01351115611f3f57600080fd5b611f508e6101208f01358f01611ae5565b909350915067ffffffffffffffff6101408e01351115611f6f57600080fd5b611f808e6101408f01358f01611cb6565b90509295989b509295989b509295989b565b60008060008060008060008060e0898b031215611fae57600080fd5b611fb789611ac9565b975060208901359650604089013567ffffffffffffffff811115611fda57600080fd5b611fe68b828c01611ae5565b999c989b50996060810135986080820135985060a0820135975060c09091013595509350505050565b6000806000806000806000806000806101208b8d03121561202f57600080fd5b6120388b611ac9565b995060208b0135985060408b013567ffffffffffffffff8082111561205c57600080fd5b6120688e838f01611ae5565b909a50985060608d0135975060808d0135965060a08d0135955060c08d0135945088915061209860e08e01611ac9565b93506101008d01359150808211156120af57600080fd5b506120bc8d828e01611cb6565b9150509295989b9194979a5092959850565b6000815180845260005b818110156120f4576020818501810151868301820152016120d8565b81811115612106576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611c0f60208301846120ce565b60008060008060008060008060a0898b03121561214a57600080fd5b61215389611ac9565b975061216160208a01611ac9565b9650604089013567ffffffffffffffff8082111561217e57600080fd5b61218a8c838d01611e14565b909850965060608b01359150808211156121a357600080fd5b6121af8c838d01611e14565b909650945060808b0135915080821115611bb857600080fd5b60008060008060008060a087890312156121e157600080fd5b6121ea87611ac9565b95506121f860208801611ac9565b94506040870135935060608701359250608087013567ffffffffffffffff81111561222257600080fd5b61222e89828a01611ae5565b979a9699509497509295939492505050565b60006020828403121561225257600080fd5b81518015158114611c0f57600080fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561228a5761228a612262565b500390565b6000826122ac57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156122cb576122cb612262565b500290565b600082198211156122e3576122e3612262565b500190565b634e487b7160e01b600052603260045260246000fd5b6000823561011e1983360301811261231557600080fd5b9190910192915050565b6000808335601e1984360301811261233657600080fd5b83018035915067ffffffffffffffff82111561235157600080fd5b602001915036819003821315611b2757600080fd5b6001600160a01b038b811682528a166020820152604081018990526101206060820181905281018790526000610140888a828501376000818a85010152601f19601f8a011683018860808501528760a08501528660c08501528560e085015281848203016101008501526123dc828201866120ce565b9e9d5050505050505050505050505050565b82815260406020820152600061240760408301846120ce565b949350505050565b60006020828403121561242157600080fd5b8151611c0f81611bd9565b600060ff821660ff84168082101561244657612446612262565b90039392505050565b818382376000910190815291905056fea26469706673582212203b4670d303d830ab6e75c4eb634ef4bfe59db3d98e614261f3c038fa23f6726c64736f6c634300080f0033",
  "devdoc": {
    "author": "Rodrigo Herrera I.",
    "errors": {
      "LaserState__initOwner__walletInitialized()": [
        {
          "details": "initOwner() custom errors."
        }
      ],
      "LaserState__upgradeSingleton__notLaser()": [
        {
          "details": "upgradeSingleton() custom error."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addLaserModule(address)": {
        "params": {
          "newModule": "Address of a new authorized Laser module."
        }
      },
      "changeOwner(address)": {
        "params": {
          "newOwner": "Address of the new owner."
        }
      },
      "constructor": {
        "details": "Sets the owner of the implementation address (singleton) to 'this'.      This will make the base contract unusable, even though it does not have 'delegatecall'."
      },
      "exec(address,uint256,bytes,uint256,uint256,uint256,uint256,address,bytes)": {
        "params": {
          "_nonce": "Anti-replay number.",
          "callData": "Data payload for the transaction.",
          "gasLimit": "Maximum amount of gas the owner is willing to use for this transaction.",
          "maxFeePerGas": "Maximum WEI the owner is willing to pay per unit of gas.",
          "maxPriorityFeePerGas": "Miner's tip.",
          "relayer": "Address to refund for the inclusion of this transaction.",
          "signatures": "The signature(s) of the hash of this transaction.",
          "to": "Destination address.",
          "value": "Amount in WEI to transfer."
        }
      },
      "execFromModule(address,uint256,bytes,uint256,uint256,uint256,address)": {
        "params": {
          "callData": "Data payload for the transaction.",
          "gasLimit": "Maximum amount of gas the owner is willing to use for this transaction.",
          "maxFeePerGas": "Maximum WEI the owner is willing to pay per unit of gas.",
          "maxPriorityFeePerGas": "Miner's tip.",
          "relayer": "Address to refund for the inclusion of this transaction.",
          "to": "Destination address.",
          "value": "Amount in WEI to transfer."
        }
      },
      "getChainId()": {
        "returns": {
          "chainId": "The chain id of this."
        }
      },
      "init(address,uint256,uint256,uint256,address,address,address,address,address,bytes,bytes)": {
        "params": {
          "_laserMasterGuard": "Address of the parent guard module 'LaserMasterGuard'.",
          "_laserRegistry": "Address of the Laser registry: module that keeps track of authorized modules.",
          "_owner": "The owner of the wallet.",
          "gasLimit": "Maximum amount of gas the owner is willing to use for this transaction.",
          "laserVault": "Address of the guard sub-module 'LaserVault'.",
          "maxFeePerGas": "Maximum WEI the owner is willing to pay per unit of gas.",
          "maxPriorityFeePerGas": "Miner's tip.",
          "ownerSignature": "Signature of the owner that validates approval for initialization.",
          "relayer": "Address to refund for the inclusion of this transaction.",
          "smartSocialRecoveryInitData": "Initialization data for the provided module.",
          "smartSocialRecoveryModule": "Address of the initial module to setup -> Smart Social Recovery."
        }
      },
      "isValidSignature(bytes32,bytes)": {
        "params": {
          "hash": "Hash of the data to be signed.",
          "signature": "Signature byte array associated with hash. MUST return the bytes4 magic value 0x1626ba7e when function passes. MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5) MUST allow external calls"
        },
        "returns": {
          "_0": "Magic value if signature matches the owner's address and the wallet is not locked."
        }
      },
      "lock()": {
        "details": "Can only be called by address(this)."
      },
      "multiCall((address,uint256,bytes,uint256,uint256,uint256,uint256,address,bytes)[])": {
        "params": {
          "transactions": "An array of Laser transactions."
        }
      },
      "simulateTransaction(address,uint256,bytes,uint256,uint256,uint256,uint256,address,bytes)": {
        "params": {
          "_nonce": "Anti-replay number.",
          "callData": "Data payload for the transaction.",
          "gasLimit": "Maximum amount of gas the owner is willing to use for this transaction.",
          "maxFeePerGas": "Maximum WEI the owner is willing to pay per unit of gas.",
          "maxPriorityFeePerGas": "Miner's tip.",
          "relayer": "Address to refund for the inclusion of this transaction.",
          "signatures": "The signature(s) of the hash of this transaction.",
          "to": "Destination address.",
          "value": "Amount in WEI to transfer."
        },
        "returns": {
          "gasUsed": "The gas used for this transaction."
        }
      },
      "unlock()": {
        "details": "Can only be called by address(this)."
      }
    },
    "title": "LaserWallet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLaserModule(address)": {
        "notice": "Restricted, can only be called by the wallet 'address(this)' or module."
      },
      "changeOwner(address)": {
        "notice": "Restricted, can only be called by the wallet 'address(this)' or module."
      },
      "domainSeparator()": {
        "notice": "Domain separator for this wallet."
      },
      "exec(address,uint256,bytes,uint256,uint256,uint256,uint256,address,bytes)": {
        "notice": "Executes a generic transaction.         If 'gasLimit' does not match the actual gas limit of the transaction, the relayer can incur losses.         It is the relayer's responsability to make sure that they are the same,         the user does not get affected if a mistake is made."
      },
      "execFromModule(address,uint256,bytes,uint256,uint256,uint256,address)": {
        "notice": "Executes a transaction from an authorized module.         If 'gasLimit' does not match the actual gas limit of the transaction, the relayer can incur losses.         It is the relayer's responsability to make sure that they are the same,         the user does not get affected if a mistake is made."
      },
      "init(address,uint256,uint256,uint256,address,address,address,address,address,bytes,bytes)": {
        "notice": "Setup function, sets initial storage of the wallet.         It can't be called after initialization."
      },
      "isValidSignature(bytes32,bytes)": {
        "notice": "Should return whether the signature provided is valid for the provided hash."
      },
      "lock()": {
        "notice": "Locks the wallet. Once locked, only the SSR module can unlock it or recover it."
      },
      "multiCall((address,uint256,bytes,uint256,uint256,uint256,uint256,address,bytes)[])": {
        "notice": "Executes a batch of transactions."
      },
      "operationHash(address,uint256,bytes,uint256,uint256,uint256,uint256)": {
        "notice": "Returns the hash to be signed to execute a transaction."
      },
      "simulateTransaction(address,uint256,bytes,uint256,uint256,uint256,uint256,address,bytes)": {
        "notice": "Simulates a transaction.         It needs to be called off-chain from address(0)."
      },
      "unlock()": {
        "notice": "Unlocks the wallet. Can only be unlocked or recovered from the SSR module."
      }
    },
    "notice": "Laser is a modular smart contract wallet made for the Ethereum Virtual Machine.         It has modularity (programmability) and security at its core.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4742,
        "contract": "contracts/LaserWallet.sol:LaserWallet",
        "label": "singleton",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4744,
        "contract": "contracts/LaserWallet.sol:LaserWallet",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4746,
        "contract": "contracts/LaserWallet.sol:LaserWallet",
        "label": "laserMasterGuard",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4748,
        "contract": "contracts/LaserWallet.sol:LaserWallet",
        "label": "laserRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4750,
        "contract": "contracts/LaserWallet.sol:LaserWallet",
        "label": "isLocked",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 4752,
        "contract": "contracts/LaserWallet.sol:LaserWallet",
        "label": "nonce",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4756,
        "contract": "contracts/LaserWallet.sol:LaserWallet",
        "label": "laserModules",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}